{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Release Notes - Version 0.1.1","text":"<p>Last updated on Feb 17, 2023</p>"},{"location":"#coresets-and-coreset-trees","title":"Coresets and Coreset Trees","text":"<p>A Coreset is a weighted subset of samples from a larger dataset, selected in such a way that the selected samples maintain the statistical properties and corner cases of the full dataset such that training an algorithm on the Coreset will yield the same results as training that same algorithm on the full dataset.</p> <p>The DataHeroes library can be used to build a Coreset as well as to build and maintain a more complex Coreset Structure, known as a Coreset Tree. Once the Coreset or Coreset tree is built, various data science operations can be performed on it, such as training a model, updating labels and removing samples.</p> <p>Unlike a Coreset which is built over the entire dataset in one iteration, a Coreset Tree is comprised of multiple Coresets, each built separately for a chunk (batch) of the dataset (<code>chunk_size</code>) and then combined iteratively in a tree-like manner. </p> <p>In the illustration below, the entire dataset was split into 8 chunks, of 10K instances each (X1, \u2026, X8) and a Coreset of up to 1K samples (<code>coreset_size</code>) was built for each chunk separately (C1, C2, C4, \u2026, C12). Every pair of Coresets is then combined into a new Coreset, in a tree-like hierarchy, with the root being the minimal subset, called the root Coreset (C15).  The Coreset Tree data structure has several advantages over a single Coreset computed over the entire dataset:</p> <ul> <li>A single Coreset requires the entire dataset to fit into the device\u2019s memory and is therefore limited in the size of datasets it can handle. A Coreset Tree, does not have this limitation as it processes the dataset in chunks and can therefore handle any dataset size by splitting the data into the appropriate number of chunks.</li> <li>A Coreset Tree can be computed much faster since the Coresets\u2019 computation can be distributed across a cluster of devices or processors.</li> <li>In a Coreset Tree, additional data can be added to the original dataset without requiring re-computation of the entire Coreset Tree. A Coreset just needs to be built for the additional data and then that Coreset is added to the Coreset Tree, while updating only the necessary Coreset nodes on the path to the root Coreset. This makes it a great structure to use for model maintenance in production.</li> <li>Similarly, updating the target or features of existing instances or removing instances, does not require re\u2011computation of the entire Coreset Tree, updating the Coreset nodes on the path to the root Coreset will suffice. E.g.: If we updated the target for some instances in X6, all we need to do to keep the Coreset Tree updated, is to update the Coresets C9, C10, C14 and C15, while the rest of the Coresets remain unchanged.</li> </ul> <p>The main disadvantage of the Coreset Tree versus a single Coreset computed over the entire dataset, is that each level of the Coreset tree increases the approximation error, therefore leading to a slightly less accurate root Coreset. However, this error can be controlled and decreased easily, by increasing the <code>coreset_size</code>.</p> <p>Another disadvantage of the Coreset tree versus a single Coreset is that in every level of the tree we lose some \u201coutliers\u201d which are not carried over from the previous level down. Hence the more levels a tree has, the less \u201coutliers\u201d remain in its root coreset. This can be controlled as well by indicating to the <code>build()</code> function when building the Coreset, whether it should be optimized for training (more levels) or for cleaning (a single level).</p>"},{"location":"#building-a-coreset-or-coreset-tree","title":"Building a Coreset or Coreset Tree","text":"<p>The class representing the Coreset Tree in the DataHeroes library is named CoresetTreeService. While the <code>chunk_size</code> and <code>coreset_size</code> can be passed as parameters to the class, the default behavior is for them to be automatically calculated by the class when the Coreset is built based on the quadruplet: \u2018number of\u00ad instances\u2019, \u2018number of features\u2019 (deduced from the dataset), \u2018number of classes\u2019 (if passed, otherwise deduced from the dataset) and the \u2018memory\u2019 (if passed, otherwise deduced based on the device\u2019s memory). Based on this quadruplet the class will also decide whether to build an actual Coreset Tree or to build a single Coreset over the entire dataset. In the case of a single Coreset, every time additional data is added to the class using the partial_build function, the class will assess whether it is worth moving to an actual Coreset Tree, and will automatically convert the structure as necessary.</p> <p>To build the Coreset Tree, use the standard <code>build()</code> function or one of its sibling functions \u2013 <code>build_from_df()</code> or <code>build_from_file()</code>.</p> <p>See the build options tutorial here.</p>"},{"location":"#data-cleaning-use-case","title":"Data Cleaning Use Case","text":"<p>You can use a Coreset property referred to as Importance (or Sensitivity) to systematically identify potential errors and anomalies in your data. When building a Coreset, every instance in the data is assigned an Importance value, which indicates how important it is to the final machine learning model. Instances that receive a high Importance value in the Coreset computation, require attention as they usually indicate a labeling error, anomaly, out-of-distribution problem or other data-related issue. This version allows you to find the important samples in the dataset, regardless of what algorithm you use to train your model.</p> <p>To review data instances based on their importance, first build a Coreset using any <code>build()</code> function, while setting the parameter <code>optimized_for</code> to 'cleaning', then use the <code>get_important_samples()</code> function to get the samples with the highest importance, for the classes of interest. </p> <p>When you find incorrectly labeled samples, use the <code>update_targets()</code> function to update their labels or remove the samples using the <code>remove_samples()</code> function. Any such change to the samples will automatically update the Coreset data structure to reflect the changes. </p> <p>Should you prefer to suppress these updates until you finish all your changes, set the force_do_nothing flag to True when calling the <code>update_targets()</code> or <code>remove_samples()</code> functions and call the <code>update_dirty()</code> function to update the Coreset data structure when you\u2019re ready. More advanced cleaning techniques can be applied by using filters with the <code>filter_out_samples()</code> function.</p> <p>When cleaning, it is important to remember that both the train and test dataset should be cleaned to maintain a high quality, non-biased test.</p> <p>See data cleaning tutorials here.</p>"},{"location":"#training-and-hyperparameter-tuning-use-case","title":"Training and Hyperparameter Tuning Use Case","text":"<p>Using our much smaller Coreset structure, you can train or tune your model orders of magnitude faster and consume significantly less compute resources and energy, compared to using the full dataset. </p> <p>Use the DataHeroes\u2019 library <code>fit()</code> function to fit a model on the Coreset and the <code>predict()</code> function to run predictions on the model. Alternatively, if you prefer to use other libraries for training, use the <code>get_coreset()</code> function to retrieve a numpy array or pandas dataframe version of the Coreset which can be used with other libraries. </p> <p>To check the quality of your Coreset, you can fit a model and compare its predictions to predictions from a model built using your full dataset. To decrease the approximation error in the case of a Coreset Tree, requesting level 1 or 2 instead of the default level 0 when calling <code>get_coreset()</code> will return the requested level from the Coreset Tree.</p> <p>The current version provides a Coreset optimized for training with the logistic regression algorithm (upcoming versions will provide additional Coresets optimized for other algorithms). To build the Coreset or Coreset Tree use any <code>build()</code> function to build the CoresetTreeServiceLG, while setting the parameter optimized_for to 'training\u2019.</p> <p>See the tutorial explaining the usage of functions in the library here.</p>"},{"location":"#model-maintenance-use-case","title":"Model Maintenance Use Case","text":"<p>You can use the Coreset Tree structure to update models in production when new data comes in, by updating the Coreset Tree with the new data and training the model on the Coreset, without having to re-train the model on the full dataset.</p> <p>After building the Coreset Tree using one of the <code>build()</code> functions, you can add additional data to the Coreset Tree using the <code>partial_build()</code> function or one of its sibling functions <code>partial_build_from_df()</code> and <code>partial_build_from_file()</code>, and retrain the model as explained above.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Create a free account on https://dataheroes.ai/getting-started/.</li> <li>Install the library on your device by running: <code>pip install dataheroes</code>.</li> <li>Activate your account by executing the following code once (from each device you\u2019re using): <pre><code>from dataheroes.utils import activate_account\nactivate_account(\"john.doe@gmail.com\")\n</code></pre></li> <li>Check out our documentation and examples available here.</li> </ol>"},{"location":"#other-library-dependencies","title":"Other library dependencies","text":"<p>The DataHeroes library has dependency on other libraries. Please note that when installing the DataHeroes library, older versions of other libraries you may be using, may get automatically updated. The table below shows the minimum version required from each library the dataheroes library depends on.</p> Library Minimum Version numpy 1.19.0 scipy 1.7.0 scikit-learn 0.24.0 pandas 1.0.0 joblib 0.15.0 threadpoolctl 2.1.0 networkx 2.5 pydot 1.4.1 matplotlib 3.3.0 opentelemetry-sdk 1.14.0 opentelemetry-api 1.14.0 opentelemetry-exporter-otlp 1.14.0 psutil 5.8.0 licensing 0.31 tables 3.6.1"},{"location":"README-DEPLOY/","title":"README DEPLOY","text":""},{"location":"README-DEPLOY/#documentation-deployment","title":"Documentation deployment","text":"<p>During execution GitHub credentials will be asked (you need enter token as password). <pre><code>pip install -r requirements_mkdocs.txt\nmkdocs gh-deploy --force\n</code></pre></p>"},{"location":"tutorials/","title":"Tutorials","text":"Example Dataset Type Description Data Cleaning: Coreset vs Random Image Classification Comparing cleaning the CIFAR-10 dataset using the dataheroes library vs. cleaning it randomly. Data Cleaning + Labeling Utility Image Classification Providing a simple utility, allowing to display the pictures and correct their labels using the dataheroes library, demonstrated on CIFAR-10. Data Cleaning Object Detection Demonstrating cleaning the COCO object detection dataset using the dataheroes library. Data Cleaning Image Classification Demonstrating cleaning the ImageNet dataset using the dataheroes library. Build Options Tabular Demonstrating different possibilities to construct the Coreset tree data structure. All Library Functions Tabular Demonstrating the usage of all library functions available for the Coreset tree data structure. Configuration File - An example configuration file."},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>services<ul> <li>coreset_tree<ul> <li>CoresetTreeServiceKMeans</li> <li>CoresetTreeServiceLG</li> <li>CoresetTreeServiceLR</li> <li>CoresetTreeServicePCA</li> <li>CoresetTreeServiceSVD</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/services/coreset_tree/kmeans/","title":"CoresetTreeServiceKMeans","text":""},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans","title":"CoresetTreeServiceKMeans","text":"<pre><code>CoresetTreeServiceKMeans(*, data_manager=None, data_params=None, n_instances=None, max_memory_gb=None, optimized_for, k=None, chunk_size=None, coreset_size=None, coreset_params=None, working_directory=None, cache_dir=None, node_train_function=None, node_train_function_params=None, node_metadata_func=None, save_all=None)\n</code></pre> <p>         Bases: <code>CoresetTreeServiceUnsupervisedMixin</code>, <code>CoresetTreeService</code></p> <p>Subclass of CoresetTreeService for KMeans. A service class for creating a coreset tree and working with it. optimized_for is a required parameter defining the main usage of the service: 'training' or 'cleaning'. In the 'cleaning' case, a single Coreset is built over the entire dataset. In the 'training' case, the service will decide whether to build an actual Coreset Tree or to build a single Coreset over the entire dataset, based on the triplet: n_instances, max_memory_gb and the 'number of features' (deduced from the dataset). The chunk_size and coreset_size will be deduced based on the above triplet too. In case chunk_size and coreset_size are provided, they will override all above-mentioned parameters (less recommended).</p> <p>Parameters:</p> Name Type Description Default <code>data_manager</code> <code>DataManagerT</code> <p>The class used to interact with the provided data and store it locally. By default, only the sampled data is stored in HDF5 files format.</p> <code>None</code> <code>data_params</code> <code>Union[DataParams, dict]</code> <p>Preprocessing information.</p> <p>For Example: data_params = {     'index': {'name': 'index_column'} }</p> <code>None</code> <code>n_instances</code> <code>int</code> <p>The total number of instances that are going to be processed (can be an estimation). This parameter is required and the only one from the above-mentioned quadruplet, which isn't deduced from the data.</p> <code>None</code> <code>max_memory_gb</code> <code>int</code> <p>The maximum memory in GB that should be used. When not provided, the server's total memory is used. In any case only 80% of the provided memory or the server's total memory is considered.</p> <code>None</code> <code>optimized_for</code> <code>str</code> <p>str, either 'training' or 'cleaning'. The main usage of the service.</p> required <code>k</code> <p>Only relevant when tree is optimized_for cleaning. The number of clusters to form as well as the number of centroids to generate.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>The number of instances to be used when creating a coreset node in the tree. When defined, it will override the parameters of optimized_for, n_instances, n_classes and max_memory_gb. chunk_size=0: nodes are created based on input chunks</p> <code>None</code> <code>coreset_size</code> <code>Union[int, dict]</code> <p>Represents the coreset size of each node in the coreset tree. The coreset is constructed by sampling data instances from the dataset based on their calculated importance. Since each instance may be sampled more than once, in practice, the actual size of the coreset is mostly smaller than coreset_size.</p> <code>None</code> <code>coreset_params</code> <code>Union[CoresetParams, dict]</code> <p>Coreset algorithm specific parameters.</p> <code>None</code> <code>node_train_function</code> <code>Callable[[np.ndarray, np.ndarray, np.ndarray], Any]</code> <p>method for training model at tree node level.</p> <code>None</code> <code>node_train_function_params</code> <code>dict</code> <p>kwargs to be used when calling node_train_function.</p> <code>None</code> <code>node_metadata_func</code> <code>Callable[[Tuple[np.ndarray], np.ndarray, Union[list, None]], Union[list, dict, None]]</code> <p>A method for storing user meta data on each node.</p> <code>None</code> <code>working_directory</code> <code>Union[str, os.PathLike]</code> <p>Local directory where intermediate data is stored.</p> <code>None</code> <code>cache_dir</code> <code>Union[str, os.PathLike]</code> <p>For internal use when loading a saved service.</p> <code>None</code> <code>save_all</code> <code>bool</code> <p>When set to True, the entire dataset would be saved and not only the selected samples. When optimized_for='cleaning' the default is True. When optimized_for='training' the default is False.</p> <code>None</code>"},{"location":"reference/services/coreset_tree/lg/","title":"CoresetTreeServiceLG","text":""},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG","title":"CoresetTreeServiceLG","text":"<pre><code>CoresetTreeServiceLG(*, data_manager=None, data_params=None, n_instances=None, max_memory_gb=None, n_classes=None, optimized_for, chunk_size=None, coreset_size=None, coreset_params=None, sample_all=None, working_directory=None, cache_dir=None, node_train_function=None, node_train_function_params=None, node_metadata_func=None, save_all=None)\n</code></pre> <p>         Bases: <code>CoresetTreeServiceClassifierMixin</code>, <code>CoresetTreeServiceSupervisedMixin</code>, <code>CoresetTreeService</code></p> <p>Subclass of CoresetTreeService for Logistic Regression. A service class for creating a coreset tree and working with it. optimized_for is a required parameter defining the main usage of the service: 'training' or 'cleaning'. In the 'cleaning' case, a single Coreset is built over the entire dataset. In the 'training' case, the service will decide whether to build an actual Coreset Tree or to build a single Coreset over the entire dataset, based on the quadruplet: n_instances, n_classes, max_memory_gb and the 'number of features' (deduced from the dataset). The chunk_size and coreset_size will be deduced based on the above quadruplet too. In case chunk_size and coreset_size are provided, they will override all above mentioned parameters (less recommended).</p> <p>If you intend passing class_weight to your classifier, it is recommended to pass it as a parameter to the class in coreset_params (see example below), so the coreset can be built while taking into account the class_weight. You can continue passing class_weight to your classifier, while retrieving the coreset using the get_coreset method with the parameter inverse_class_weight set to True (default). If you wish to stop passing class_weight to the classifier, retrieve the coreset using the get_coreset method with the parameter inverse_class_weight set to False.</p> <p>If you intend passing C (the inverse of regularization strength) to your solver, it should be adjusted as specified here when used on the Coreset: C = C * float(np.sum(weights) / len(X))</p> <p>Parameters:</p> Name Type Description Default <code>data_manager</code> <code>DataManagerT</code> <p>The class used to interact with the provided data and store it locally. By default, only the sampled data is stored in HDF5 files format.</p> <code>None</code> <code>data_params</code> <code>Union[DataParams, dict]</code> <p>Preprocessing information.</p> <p>For Example: data_params = {     'target': {'name': 'Cover_Type'},     'index': {'name': 'index_column'} }</p> <code>None</code> <code>n_instances</code> <code>int</code> <p>The total number of instances that are going to be processed (can be an estimation). This parameter is required and the only one from the above-mentioned quadruplet, which isn't deduced from the data.</p> <code>None</code> <code>n_classes</code> <code>int</code> <p>The total number of classes (labels). When not provided, will be deduced from the provided data. When multiple files are provided n_classes will be deduced based on the first file only.</p> <code>None</code> <code>max_memory_gb</code> <code>int</code> <p>The maximum memory in GB that should be used. When not provided, the server's total memory is used. In any case only 80% of the provided memory or the server's total memory is considered.</p> <code>None</code> <code>optimized_for</code> <code>str</code> <p>str, either 'training' or 'cleaning'. The main usage of the service.</p> required <code>chunk_size</code> <code>int</code> <p>The number of instances to be used when creating a coreset node in the tree. When defined, it will override the parameters of optimized_for, n_instances, n_classes and max_memory_gb. chunk_size=0: nodes are created based on input chunks</p> <code>None</code> <code>coreset_size</code> <code>Union[int, dict]</code> <p>Represents the coreset size of each node in the coreset tree. The coreset is constructed by sampling data instances from the dataset based on their calculated importance. Since each instance may be sampled more than once, in practice, the actual size of the coreset is mostly smaller than coreset_size.</p> <code>None</code> <code>sample_all</code> <code>Iterable</code> <p>Relevant for classification tasks only. A list of classes for which all instances should be taken, instead of applying sampling.</p> <code>None</code> <code>coreset_params</code> <code>Union[CoresetParams, dict]</code> <p>Coreset algorithm specific parameters.</p> <p>For example: coreset_params = {     \"class_weight\": {\"a\": 0.5, \"b\": 0.5} }</p> <code>None</code> <code>node_train_function</code> <code>Callable[[np.ndarray, np.ndarray, np.ndarray], Any]</code> <p>method for training model at tree node level.</p> <code>None</code> <code>node_train_function_params</code> <code>dict</code> <p>kwargs to be used when calling node_train_function.</p> <code>None</code> <code>node_metadata_func</code> <code>Callable[[Tuple[np.ndarray], np.ndarray, Union[list, None]], Union[list, dict, None]]</code> <p>A method for storing user metadata on each node.</p> <code>None</code> <code>working_directory</code> <code>Union[str, os.PathLike]</code> <p>Local directory where intermediate data is stored.</p> <code>None</code> <code>cache_dir</code> <code>Union[str, os.PathLike]</code> <p>For internal use when loading a saved service.</p> <code>None</code> <code>save_all</code> <code>bool</code> <p>When set to True, the entire dataset would be saved and not only selected samples. When optimized_for='cleaning' the default is True. When optimized_for='training' the default is False.</p> <code>None</code>"},{"location":"reference/services/coreset_tree/lr/","title":"CoresetTreeServiceLR","text":""},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR","title":"CoresetTreeServiceLR","text":"<pre><code>CoresetTreeServiceLR(*, data_manager=None, data_params=None, n_instances=None, max_memory_gb=None, optimized_for, chunk_size=None, coreset_size=None, coreset_params=None, working_directory=None, cache_dir=None, node_train_function=None, node_train_function_params=None, node_metadata_func=None, save_all=None)\n</code></pre> <p>         Bases: <code>CoresetTreeServiceSupervisedMixin</code>, <code>CoresetTreeService</code></p> <p>Subclass of CoresetTreeService for Linear Regression. A service class for creating a coreset tree and working with it. optimized_for is a required parameter defining the main usage of the service: 'training' or 'cleaning'. In the 'cleaning' case, a single Coreset is built over the entire dataset. In the 'training' case, the service will decide whether to build an actual Coreset Tree or to build a single Coreset over the entire dataset, based on the triplet: n_instances, max_memory_gb and the 'number of features' (deduced from the dataset). The chunk_size and coreset_size will be deduced based on the above triplet too. In case chunk_size and coreset_size are provided, they will override all above-mentioned parameters (less recommended).</p> <p>Parameters:</p> Name Type Description Default <code>data_manager</code> <code>DataManagerT</code> <p>The class used to interact with the provided data and store it locally. By default, only the sampled data is stored in HDF5 files format.</p> <code>None</code> <code>data_params</code> <code>Union[DataParams, dict]</code> <p>Preprocessing information.</p> <p>For Example: data_params = {     'index': {'name': 'index_column'} }</p> <code>None</code> <code>n_instances</code> <code>int</code> <p>The total number of instances that are going to be processed (can be an estimation). This parameter is required and the only one from the above-mentioned quadruplet, which isn't deduced from the data.</p> <code>None</code> <code>max_memory_gb</code> <code>int</code> <p>The maximum memory in GB that should be used. When not provided, the server's total memory is used. In any case only 80% of the provided memory or the server's total memory is considered.</p> <code>None</code> <code>optimized_for</code> <code>str</code> <p>either 'training' or 'cleaning'. The main usage of the service.</p> required <code>chunk_size</code> <code>int</code> <p>The number of instances to be used when creating a coreset node in the tree. When defined, it will override the parameters of optimized_for, n_instances, n_classes and max_memory_gb. chunk_size=0: nodes are created based on input chunks</p> <code>None</code> <code>coreset_size</code> <code>Union[int, dict]</code> <p>Represents the coreset size of each node in the coreset tree. The coreset is constructed by sampling data instances from the dataset based on their calculated importance. Since each instance may be sampled more than once, in practice, the actual size of the coreset is mostly smaller than coreset_size.</p> <code>None</code> <code>coreset_params</code> <code>Union[CoresetParams, dict]</code> <p>Coreset algorithm specific parameters.</p> <code>None</code> <code>node_train_function</code> <code>Callable[[np.ndarray, np.ndarray, np.ndarray], Any]</code> <p>method for training model at tree node level.</p> <code>None</code> <code>node_train_function_params</code> <code>dict</code> <p>kwargs to be used when calling node_train_function.</p> <code>None</code> <code>node_metadata_func</code> <code>Callable[[Tuple[np.ndarray], np.ndarray, Union[list, None]], Union[list, dict, None]]</code> <p>A method for storing user metadata on each node.</p> <code>None</code> <code>working_directory</code> <code>Union[str, os.PathLike]</code> <p>Local directory where intermediate data is stored.</p> <code>None</code> <code>cache_dir</code> <code>Union[str, os.PathLike]</code> <p>For internal use when loading a saved service.</p> <code>None</code> <code>save_all</code> <code>bool</code> <p>When set to True, the entire dataset would be saved and not only the selected samples. When optimized_for='cleaning' the default is True. When optimized_for='training' the default is False.</p> <code>None</code>"},{"location":"reference/services/coreset_tree/pca/","title":"CoresetTreeServicePCA","text":""},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA","title":"CoresetTreeServicePCA","text":"<pre><code>CoresetTreeServicePCA(*, data_manager=None, data_params=None, n_instances=None, max_memory_gb=None, optimized_for, chunk_size=None, coreset_size=None, coreset_params=None, working_directory=None, cache_dir=None, node_train_function=None, node_train_function_params=None, node_metadata_func=None, save_all=None)\n</code></pre> <p>         Bases: <code>CoresetTreeServiceUnsupervisedMixin</code>, <code>CoresetTreeService</code></p> <p>Subclass of CoresetTreeService for PCA. A service class for creating a coreset tree and working with it. optimized_for is a required parameter defining the main usage of the service: 'training' or 'cleaning'. In the 'cleaning' case, a single Coreset is built over the entire dataset. In the 'training' case, the service will decide whether to build an actual Coreset Tree or to build a single Coreset over the entire dataset, based on the triplet: n_instances, n_classes, max_memory_gb and the 'number of features' (deduced from the dataset). The chunk_size and coreset_size will be deduced based on the above triplet too. In case chunk_size and coreset_size are provided, they will override all above-mentioned parameters (less recommended).</p> <p>Parameters:</p> Name Type Description Default <code>data_manager</code> <code>DataManagerT</code> <p>The class used to interact with the provided data and store it locally. By default, only the sampled data is stored in HDF5 files format.</p> <code>None</code> <code>data_params</code> <code>Union[DataParams, dict]</code> <p>Preprocessing information.</p> <p>For Example: data_params = {     'index': {'name': 'index_column'} }</p> <code>None</code> <code>n_instances</code> <code>int</code> <p>The total number of instances that are going to be processed (can be an estimation). This parameter is required and the only one from the above-mentioned quadruplet, which isn't deduced from the data.</p> <code>None</code> <code>max_memory_gb</code> <code>int</code> <p>The maximum memory in GB that should be used. When not provided, the server's total memory is used. In any case only 80% of the provided memory or the server's total memory is considered.</p> <code>None</code> <code>optimized_for</code> <code>str</code> <p>either 'training' or 'cleaning'. The main usage of the service.</p> required <code>chunk_size</code> <code>int</code> <p>The number of instances to be used when creating a coreset node in the tree. When defined, it will override the parameters of optimized_for, n_instances, n_classes and max_memory_gb. chunk_size=0: nodes are created based on input chunks</p> <code>None</code> <code>coreset_size</code> <code>Union[int, dict]</code> <p>Represents the coreset size of each node in the coreset tree. The coreset is constructed by sampling data instances from the dataset based on their calculated importance. Since each instance may be sampled more than once, in practice, the actual size of the coreset is mostly smaller than coreset_size.</p> <code>None</code> <code>coreset_params</code> <code>Union[CoresetParams, dict]</code> <p>Coreset algorithm specific parameters.</p> <code>None</code> <code>node_train_function</code> <code>Callable[[np.ndarray, np.ndarray, np.ndarray], Any]</code> <p>method for training model at tree node level.</p> <code>None</code> <code>node_train_function_params</code> <code>dict</code> <p>kwargs to be used when calling node_train_function.</p> <code>None</code> <code>node_metadata_func</code> <code>Callable[[Tuple[np.ndarray], np.ndarray, Union[list, None]], Union[list, dict, None]]</code> <p>A method for storing user metadata on each node.</p> <code>None</code> <code>working_directory</code> <code>Union[str, os.PathLike]</code> <p>Local directory where intermediate data is stored.</p> <code>None</code> <code>cache_dir</code> <code>Union[str, os.PathLike]</code> <p>For internal use when loading a saved service.</p> <code>None</code> <code>save_all</code> <code>bool</code> <p>When set to True, the entire dataset would be saved and not only the selected samples. When optimized_for='cleaning' the default is True. When optimized_for='training' the default is False.</p> <code>None</code>"},{"location":"reference/services/coreset_tree/svd/","title":"CoresetTreeServiceSVD","text":""},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD","title":"CoresetTreeServiceSVD","text":"<p>         Bases: <code>CoresetTreeServiceUnsupervisedMixin</code>, <code>CoresetTreeService</code></p> <p>Subclass of CoresetTreeService for SVD</p>"},{"location":"coverage/","title":"Coverage","text":""}]}