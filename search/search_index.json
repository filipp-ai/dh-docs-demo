{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Release Notes - Version 0.4.0","text":"<p>Last updated on June 08, 2023</p>"},{"location":"#new-features-and-improvements-in-version-040","title":"New Features and Improvements in version 0.4.0","text":"<ul> <li>Adding support for Python 3.11.</li> <li>Allowing to create a CoresetTreeService, which can be used for both training and cleaning (optimized_for=['cleaning', 'training']).</li> <li>The CoresetTreeService can now handle datasets that do not fit into the device\u2019s memory also for cleaning purposes (for training purposes this was supported from the initial release).</li> <li>The get_important_samples function was renamed to get_cleaning_samples to improve the clarity of its purpose.</li> <li>Adding hyperparameter tuning capabilities to the library with the introduction of the grid_search() function, which works in a similar manner to Scikit-learn\u2019s GridSearchCV class, only dramatically faster, as it utilizes the Coreset tree. Introducing also the cross_validate() and holdout_validate() functions, which can be used directly or as the validation method as part of the grid_search() function.</li> <li>Further improving the error messages for some of the data processing problems users encountered.</li> </ul>"},{"location":"#new-features-and-improvements-in-version-030","title":"New Features and Improvements in version 0.3.0","text":"<ul> <li>An additional CoresetTreeService for all decision tree classification-based problems has been added to the library. This service can be used to create classification-based Coresets for all libraries including: XGBoost, LightGBM, CatBoost, Scikit-learn and others.</li> <li>Improving the results get_coreset returns in case the Coreset tree is not perfectly balanced.</li> <li>Improving the data handling capabilities, when processing the input data provided to the different build functions, such as supporting pandas.BooleanDtype and pandas.Series and returning clearer error messages for some of the data processing problems encountered.</li> </ul>"},{"location":"#coresets-and-coreset-trees","title":"Coresets and Coreset Trees","text":"<p>A Coreset is a weighted subset of samples from a larger dataset, selected in such a way that the selected samples maintain the statistical properties and corner cases of the full dataset such that training an algorithm on the Coreset will yield the same results as training that same algorithm on the full dataset.</p> <p>The DataHeroes library can be used to build a Coreset as well as to build and maintain a more complex Coreset Structure, known as a Coreset Tree. Once the Coreset or Coreset tree is built, various data science operations can be performed on it, such as training a model, updating labels and removing samples.</p> <p>Unlike a Coreset which is built over the entire dataset in one iteration, a Coreset Tree is comprised of multiple Coresets, each built separately for a chunk (batch) of the dataset (<code>chunk_size</code>) and then combined iteratively in a tree-like manner. </p> <p>In the illustration below, the entire dataset was split into 8 chunks, of 10K instances each (X1, \u2026, X8) and a Coreset of up to 1K samples (<code>coreset_size</code>) was built for each chunk separately (C1, C2, C4, \u2026, C12). Every pair of Coresets is then combined into a new Coreset, in a tree-like hierarchy, with the root being the minimal subset, called the root Coreset (C15).  The Coreset Tree data structure has several advantages over a single Coreset computed over the entire dataset:</p> <ul> <li>A single Coreset requires the entire dataset to fit into the device\u2019s memory and is therefore limited in the size of datasets it can handle. A Coreset Tree, does not have this limitation as it processes the dataset in chunks and can therefore handle any dataset size by splitting the data into the appropriate number of chunks.</li> <li>A Coreset Tree can be computed much faster since the Coresets\u2019 computation can be distributed across a cluster of devices or processors.</li> <li>In a Coreset Tree, additional data can be added to the original dataset without requiring re-computation of the entire Coreset Tree. A Coreset just needs to be built for the additional data and then that Coreset is added to the Coreset Tree, while updating only the necessary Coreset nodes on the path to the root Coreset. This makes it a great structure to use for model maintenance in production.</li> <li>Similarly, updating the target or features of existing instances or removing instances, does not require re\u2011computation of the entire Coreset Tree, updating the Coreset nodes on the path to the root Coreset will suffice. E.g.: If we updated the target for some instances in X6, all we need to do to keep the Coreset Tree updated, is to update the Coresets C9, C10, C14 and C15, while the rest of the Coresets remain unchanged.</li> </ul> <p>The main disadvantage of the Coreset Tree versus a single Coreset computed over the entire dataset, is that each level of the Coreset tree increases the approximation error, therefore leading to a slightly less accurate root Coreset. However, this error can be controlled and decreased easily, by increasing the <code>coreset_size</code>.</p>"},{"location":"#building-a-coreset-or-coreset-tree","title":"Building a Coreset or Coreset Tree","text":"<p>The class representing the Coreset Tree in the DataHeroes library is named CoresetTreeService. While the <code>chunk_size</code> and <code>coreset_size</code> can be passed as parameters to the class, the default behavior is for them to be automatically calculated by the class when the Coreset is built based on the quadruplet: \u2018number of\u00ad instances\u2019, \u2018number of features\u2019 (deduced from the dataset), \u2018number of classes\u2019 (if passed, otherwise deduced from the dataset) and the \u2018memory\u2019 (if passed, otherwise deduced based on the device\u2019s memory). Based on this quadruplet the class will also decide whether to build an actual Coreset Tree or to build a single Coreset over the entire dataset. In the case of a single Coreset, every time additional data is added to the class using the partial_build function, the class will assess whether it is worth moving to an actual Coreset Tree, and will automatically convert the structure as necessary.</p> <p>To build the Coreset Tree, use the standard <code>build()</code> function or one of its sibling functions \u2013 <code>build_from_df()</code> or <code>build_from_file()</code>.</p> <p>See the build options tutorial here.</p>"},{"location":"#data-cleaning-use-case","title":"Data Cleaning Use Case","text":"<p>You can use a Coreset property referred to as Importance (or Sensitivity) to systematically identify potential errors and anomalies in your data. When building a Coreset, every instance in the data is assigned an Importance value, which indicates how important it is to the final machine learning model. Instances that receive a high Importance value in the Coreset computation, require attention as they usually indicate a labeling error, anomaly, out-of-distribution problem or other data-related issue. This version allows you to find the important samples in the dataset, regardless of what algorithm you use to train your model.</p> <p>To review data instances based on their importance, first build a Coreset using any <code>build()</code> function, while setting the parameter <code>optimized_for</code> to 'cleaning', then use the <code>get_cleaning_samples()</code> function to get the samples with the highest importance, for the classes of interest. </p> <p>When you find incorrectly labeled samples, use the <code>update_targets()</code> function to update their labels or remove the samples using the <code>remove_samples()</code> function. Any such change to the samples will automatically update the Coreset data structure to reflect the changes. </p> <p>Should you prefer to suppress these updates until you finish all your changes, set the force_do_nothing flag to True when calling the <code>update_targets()</code> or <code>remove_samples()</code> functions and call the <code>update_dirty()</code> function to update the Coreset data structure when you\u2019re ready. More advanced cleaning techniques can be applied by using filters with the <code>filter_out_samples()</code> function.</p> <p>When cleaning, it is important to remember that both the train and test dataset should be cleaned to maintain a high quality, non-biased test.</p> <p>See data cleaning tutorials here.</p>"},{"location":"#training-and-hyperparameter-tuning-use-case","title":"Training and Hyperparameter Tuning Use Case","text":"<p>Using our much smaller Coreset structure, you can train or tune your model orders of magnitude faster and consume significantly less compute resources and energy, compared to using the full dataset. </p> <p>Use the DataHeroes\u2019 library <code>fit()</code> function to fit a model on the Coreset and the <code>predict()</code> function to run predictions on the model. Alternatively, if you prefer to use other libraries for training, use the <code>get_coreset()</code> function to retrieve a numpy array or pandas dataframe version of the Coreset which can be used with other libraries. </p> <p>To check the quality of your Coreset, you can fit a model and compare its predictions to predictions from a model built using your full dataset. To decrease the approximation error in the case of a Coreset Tree, requesting level 1 or 2 instead of the default level 0 when calling <code>get_coreset()</code> will return the requested level from the Coreset Tree.</p> <p>To hyperparameter tune your model, use the library\u2019s <code>grid_search()</code> function, which works in a similar manner to Scikit-learn\u2019s GridSearchCV class, only dramatically faster. Note that calling <code>get_coreset()</code> and passing its output to GridSearchCV would yield sub-optimal results, as GridSearchCV would split the returned Coreset into folds. When a Coreset is split, it is no longer a Coreset and won\u2019t maintain the statistical properties of your dataset. The library\u2019s <code>grid_search()</code> function overcomes this obstacle by obtaining the individual nodes of a certain level of the Coreset tree and using them as folds. By default, <code>grid_search()</code> uses cross validation as it\u2019s validation method, but one can select hold-out as an alternative validation method. It is also possible to use the <code>cross_validate()</code> or <code>holdout_validate()</code> functions directly.</p> <p>The current version provides Coresets optimized for training with the following algorithms: all decision tree classification-based problems (including XGBoost, LightGBM, CatBoost, Scikit-learn and others), logistic regression, linear regression, K-Means, PCA and SVD. To build the Coreset or Coreset Tree use any build() function, while setting the parameter <code>optimized_for</code> to <code>training</code>.   </p> <p>See building and training tutorials here.</p>"},{"location":"#model-maintenance-use-case","title":"Model Maintenance Use Case","text":"<p>You can use the Coreset Tree structure to update models in production when new data comes in, by updating the Coreset Tree with the new data and training the model on the Coreset, without having to re-train the model on the full dataset.</p> <p>After building the Coreset Tree using one of the <code>build()</code> functions, you can add additional data to the Coreset Tree using the <code>partial_build()</code> function or one of its sibling functions <code>partial_build_from_df()</code> and <code>partial_build_from_file()</code>, and retrain the model as explained above.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Create a free account on https://dataheroes.ai/getting-started/.</li> <li>Install the library on your device by running: <code>pip install dataheroes</code>.</li> <li>Activate your account by executing the following code once (from each device you\u2019re using): <pre><code>from dataheroes.utils import activate_account\nactivate_account(\"john.doe@gmail.com\")\n</code></pre></li> <li>Check out our documentation and examples available here.</li> </ol>"},{"location":"#other-library-dependencies","title":"Other library dependencies","text":"<p>The DataHeroes library has dependency on other libraries. Please note that when installing the DataHeroes library, older versions of other libraries you may be using, may get automatically updated. The table below shows the minimum version required from each library the dataheroes library depends on.</p> Library Minimum Version numpy 1.19.0 scipy 1.7.0 scikit-learn 0.24.0 pandas 1.0.0 joblib 0.15.0 threadpoolctl 2.1.0 networkx 2.5 pydot 1.4.1 matplotlib 3.3.0 opentelemetry-sdk 1.14.0 opentelemetry-api 1.14.0 opentelemetry-exporter-otlp 1.14.0 psutil 5.8.0 licensing 0.31 tables 3.6.1"},{"location":"README-DEPLOY/","title":"README DEPLOY","text":""},{"location":"README-DEPLOY/#documentation-deployment","title":"Documentation deployment","text":"<p>During execution GitHub credentials will be asked (you need enter token as password). We keep documentation in branch docs-versions  <pre><code>pip install -r requirements_mkdocs.txt\n# from branch with version 0.1.0 (for a moment that is docs_0_1_0_fixed)\nmike deploy -b docs-versions -p 0.1.0\n# from branch with version 0.2.0 (for a moment that is docs_0_2_0)\n# before deploy merge_ingerited_members.py should be executed (merge inherited members)\nmike deploy -b docs-versions -p 0.2.0 latest\nmike set-default -b docs-versions -p 0.2.0\nif we need delete certain version\nmike delete -b docs-versions -p 0.1.0\n</code></pre></p>"},{"location":"tutorials/","title":"Tutorials","text":"Example Dataset Type Description Data Cleaning: Coreset vs Random Image Classification Comparing cleaning the CIFAR-10 dataset using the dataheroes library vs. cleaning it randomly. Data Cleaning + Labeling Utility Image Classification Providing a simple utility, allowing to display the pictures and correct their labels using the dataheroes library, demonstrated on CIFAR-10. Data Cleaning Object Detection Demonstrating cleaning the COCO object detection dataset using the dataheroes library. Data Cleaning Image Classification Demonstrating cleaning the ImageNet dataset using the dataheroes library. Build Options Tabular Demonstrating different possibilities to construct the Coreset tree data structure. All Library Functions Tabular Demonstrating the usage of all library functions available for the Coreset tree data structure. Configuration File - An example configuration file."},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>services<ul> <li>coreset_tree<ul> <li>CoresetTreeServiceDTC</li> <li>CoresetTreeServiceKMeans</li> <li>CoresetTreeServiceLG</li> <li>CoresetTreeServiceLR</li> <li>CoresetTreeServicePCA</li> <li>CoresetTreeServiceSVD</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/services/coreset_tree/dtc/","title":"CoresetTreeServiceDTC","text":""},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC","title":"CoresetTreeServiceDTC","text":"<pre><code>CoresetTreeServiceDTC(*, data_manager=None, data_params=None, n_instances=None, max_memory_gb=None, n_classes=None, optimized_for, chunk_size=None, coreset_size=None, coreset_params=None, sample_all=None, working_directory=None, cache_dir=None, node_train_function=None, node_train_function_params=None, node_metadata_func=None, save_all=None)\n</code></pre> <p>         Bases: <code>CoresetTreeServiceClassifierMixin</code>, <code>CoresetTreeServiceSupervisedMixin</code>, <code>CoresetTreeService</code></p> <p>Subclass of CoresetTreeService for Decision Tree Classification-based problems. A service class for creating a coreset tree and working with it. optimized_for is a required parameter defining the main usage of the service: 'training', 'cleaning' or both, optimized_for=['training', 'cleaning']. The service will decide whether to build an actual Coreset Tree or to build a single Coreset over the entire dataset, based on the quadruplet: n_instances, n_classes, max_memory_gb and the 'number of features' (deduced from the dataset). The chunk_size and coreset_size will be deduced based on the above quadruplet too. In case chunk_size and coreset_size are provided, they will override all above mentioned parameters (less recommended).</p> <p>If you intend passing class_weight to your classifier, it is recommended to pass it as a parameter to the class in coreset_params (see example below), so the coreset can be built while taking into account the class_weight. You can continue passing class_weight to your classifier, while retrieving the coreset using the get_coreset method with the parameter inverse_class_weight set to True (default). If you wish to stop passing class_weight to the classifier, retrieve the coreset using the get_coreset method with the parameter inverse_class_weight set to False.</p> <p>The default model class which will be selected for this class instance will be XGBClassifier, on condition the xgboost library is installed. Otherwise, LGBMClassifier will be chosen if the lightgbm library is installed. Else, in the presence of the Catboost library, the selected class will be the CatBoostClassifier. Lastly, if none of the mentioned three libraries are installed, sklearn's GradientBoostingClassifier will be chosen as the final fallback.</p> <p>Parameters:</p> Name Type Description Default <code>data_manager</code> <code>DataManagerT</code> <p>DataManagerBase subclass, optional. The class used to interact with the provided data and store it locally. By default, only the sampled data is stored in HDF5 files format.</p> <code>None</code> <code>data_params</code> <code>Union[DataParams, dict]</code> <p>DataParams, optional. Preprocessing information.</p> <p>For Example: data_params = {     'target': {'name': 'Cover_Type'},     'index': {'name': 'index_column'} }</p> <code>None</code> <code>n_instances</code> <code>int</code> <p>int. The total number of instances that are going to be processed (can be an estimation). This parameter is required and the only one from the above mentioned quadruplet, which isn't deduced from the data.</p> <code>None</code> <code>n_classes</code> <code>int</code> <p>int. The total number of classes (labels). When not provided, will be deduced from the provided data. When multiple files are provided n_classes will be deduced based on the first file only.</p> <code>None</code> <code>max_memory_gb</code> <code>int</code> <p>int, optional. The maximum memory in GB that should be used. When not provided, the server's total memory is used. In any case only 80% of the provided memory or the server's total memory is considered.</p> <code>None</code> <code>optimized_for</code> <code>Union[list, str]</code> <p>str or list Either 'training', 'cleaning' or or both ['training', 'cleaning']. The main usage of the service.</p> required <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances to be used when creating a coreset node in the tree. When defined, it will override the parameters of optimized_for, n_instances, n_classes and max_memory_gb. chunk_size=0:  Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>coreset_size</code> <code>Union[int, dict]</code> <p>int, optional. Represents the coreset size of each node in the coreset tree. The coreset is constructed by sampling data instances from the dataset based on their calculated importance. Since each instance may be sampled more than once, in practice, the actual size of the coreset is mostly smaller than coreset_size.</p> <code>None</code> <code>sample_all</code> <code>Iterable</code> <p>iterable, optional. Relevant for classification tasks only. A list of classes for which all instances should be taken, instead of applying sampling.</p> <code>None</code> <code>coreset_params</code> <code>Union[CoresetParams, dict]</code> <p>CoresetParams or dict, optional. Coreset algorithm specific parameters.</p> <p>For example: coreset_params = {     \"class_weight\": {\"a\": 0.5, \"b\": 0.5} }</p> <code>None</code> <code>node_train_function</code> <code>Callable[[np.ndarray, np.ndarray, np.ndarray], Any]</code> <p>Callable, optional. method for training model at tree node level.</p> <code>None</code> <code>node_train_function_params</code> <code>dict</code> <p>dict, optional. kwargs to be used when calling node_train_function.</p> <code>None</code> <code>node_metadata_func</code> <code>Callable[[Tuple[np.ndarray], np.ndarray, Union[list, None]], Union[list, dict, None]]</code> <p>callable, optional. A method for storing user meta data on each node.</p> <code>None</code> <code>working_directory</code> <code>Union[str, os.PathLike]</code> <p>str, path, optional. Local directory where intermediate data is stored.</p> <code>None</code> <code>cache_dir</code> <code>Union[str, os.PathLike]</code> <p>str, path, optional. For internal use when loading a saved service.</p> <code>None</code> <code>save_all</code> <code>bool</code> <p>bool, optional. When set to True, the entire dataset would be saved and not only selected samples. When optimized_for='cleaning' the default is False. When optimized_for='training' the default is True. When both are set the default is True.</p> <code>None</code>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Mask for testing purposes</p>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.tree","title":"tree  <code>property</code>","text":"<pre><code>tree\n</code></pre> <p>Mask for testing purposes Will return the training tree if exists, otherwise the first tree in the trees dict</p>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.build","title":"build","text":"<pre><code>build(X, y, indices=None, props=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Create a coreset tree from the parameters X, y, indices and props (properties). build functions may be called only once. To add more data to the coreset tree use one of the partial_build functions. All features must be numeric and there should be no missing values.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>array like or iterator of arrays like. An array or an iterator of features. All features must be numeric and there should be no missing values.</p> required <code>y</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like. An array or an iterator of targets.</p> required <code>indices</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator with indices of X.</p> <code>None</code> <code>props</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator of properties. Properties, won\u2019t be used to compute the Coreset or train the model, but it is possible to filter_out_samples on them or to pass them in the select_from_function of get_cleaning_samples.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0:  Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False. False (default) - input data might be updated as result a consequence action like update_targets or update_features True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.build_from_df","title":"build_from_df","text":"<pre><code>build_from_df(datasets, target_datasets=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Create a coreset tree from pandas DataFrame(s). build functions may be called only once. To add more data to the coreset tree use one of the partial_build functions. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>datasets</code> <code>Union[Iterator[pd.DataFrame], pd.DataFrame]</code> <p>pandas DataFrame or a DataFrame iterator. Data includes features, may include labels and may include indices.</p> required <code>target_datasets</code> <code>Union[Iterator[Union[pd.DataFrame, pd.Series]], pd.DataFrame, pd.Series]</code> <p>pandas DataFrame or a DataFrame iterator, optional. Use when data is split to features and target. Should include only one column.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0:  Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False. False (default) - Input data might be updated as result of functions such as update_targets or update_features. True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.build_from_file","title":"build_from_file","text":"<pre><code>build_from_file(file_path, target_file_path=None, *, reader_f=pd.read_csv, reader_kwargs=None, reader_chunk_size_param_name=None, chunk_size=None, chunk_by=None)\n</code></pre> <p>Create a coreset tree based on data taken from local storage. build functions may be called only once. To add more data to the coreset tree use one of the partial_build functions. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories. Path(s) to the place where data is stored. Data includes features, may include targets and may include indices.</p> required <code>target_file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories, optional. Use when the dataset files are split to features and target. Each file should include only one column.</p> <code>None</code> <code>reader_f</code> <code>Callable</code> <p>pandas like read method, optional, default pandas read_csv. For example, to read excel files use pandas read_excel.</p> <code>pd.read_csv</code> <code>reader_kwargs</code> <code>dict</code> <p>dict, optional. Keyword arguments used when calling reader_f method.</p> <code>None</code> <code>reader_chunk_size_param_name</code> <code>str</code> <p>str, optional. reader_f input parameter name for reading file in chunks. When not provided we'll try to figure it out our self. Based on the data, we decide on the optimal chunk size to read and use this parameter as input when calling reader_f. Use \"ignore\" to skip the automatic chunk reading logic.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0:  Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.filter_out_samples","title":"filter_out_samples","text":"<pre><code>filter_out_samples(filter_function, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Remove samples from the coreset tree, based on the provided filter function. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>filter_function</code> <code>Callable[[Iterable, Iterable, Union[Iterable, None], Union[Iterable, None]], Iterable[Any]]</code> <p>function, optional. A function that returns a list of indices to be removed from the tree. The function should accept 4 parameters as input: indices, X, y, props and return a list(iterator) of indices to be removed from the coreset tree. For example, in order to remove all instances with a target equal to 6, use the following function: filter_function = lambda indices, X, y, props : indices[y = 6].</p> required <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.fit","title":"fit","text":"<pre><code>fit(level=0, model=None, **model_params)\n</code></pre> <p>Fit a model on the coreset tree. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>Defines the depth level of the tree from which the coreset is extracted. Level 0 returns the coreset from the head of the tree with around coreset_size samples. Level 1 returns the coreset from the level below the head of the tree with around twice of the samples compared to level 0, etc. If the passed level is greater than the maximal level of the tree, the maximal available level is used.</p> <code>0</code> <code>model</code> <code>Any</code> <p>A Scikit-learn compatible model instance, optional. When provided, model_params are not relevant. Default: instantiate the service model class using input model_params.</p> <code>None</code> <code>model_params</code> <p>Model hyperparameters kwargs. Input when instantiating default model class.</p> <code>{}</code> <p>Returns:</p> Type Description <p>Fitted estimator.</p>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.get_cleaning_samples","title":"get_cleaning_samples","text":"<pre><code>get_cleaning_samples(size=None, class_size=None, ignore_indices=None, select_from_indices=None, select_from_function=None, ignore_seen_samples=True)\n</code></pre> <p>Returns indices of samples in descending order of importance. Useful for identifying mislabeled instances and other anomalies in the data. Either class_size (recommended) or size must be provided. Must be called after build. This function is only applicable in case the coreset tree was optimized_for 'cleaning'. This function is not for retrieving the coreset (use get_coreset in this case).</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>int, optional Number of samples to return. When class_size is provided, remaining samples are taken from classes not appearing in class_size dictionary.</p> <code>None</code> <code>class_size</code> <code>Dict[Any, Union[int, str]]</code> <p>dict {class: int or \"all\" or \"any\"}, optional. Controls the number of samples to choose for each class. int: return at most size. \"all\": return all samples. \"any\": limits the returned samples to the specified classes.</p> <code>None</code> <code>ignore_indices</code> <code>Iterable</code> <p>array-like, optional. An array of indices to ignore when selecting important samples.</p> <code>None</code> <code>select_from_indices</code> <code>Iterable</code> <p>array-like, optional.  An array of indices to consider when selecting important samples.</p> <code>None</code> <code>select_from_function</code> <code>Callable[[Iterable, Iterable, Union[Iterable, None], Union[Iterable, None]], Iterable[Any]]</code> <p>function, optional.  Pass a function in order to limit the selection of the important samples accordingly.  The function should accept 4 parameters as input: indices, X, y, properties  and return a list(iterator) of the desired indices.</p> <code>None</code> <code>ignore_seen_samples</code> <code>bool</code> <p>bool, optional, default True.  Exclude already seen samples and set the seen flag on any indices returned by the function.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Dict</code> <code>Union[ValueError, dict]</code> <p>indices: array-like[int].     Important samples indices. X: array-like[int].     X array. y: array-like[int].     y array. importance: array-like[float].     The importance property. Instances that receive a high Importance in the Coreset computation,     require attention as they usually indicate a labeling error,     anomaly, out-of-distribution problem or other data-related issue.</p>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.get_cleaning_samples--examples","title":"Examples","text":"Input <p>size=100, class_size={\"class A\": 10, \"class B\": 50, \"class C\": \"all\"}</p> Output <p>10 of \"class A\", 50 of \"class B\", 12 of \"class C\" (all), 28 of \"class D/E\"</p>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.get_coreset","title":"get_coreset","text":"<pre><code>get_coreset(level=0, as_orig=False, with_index=False, inverse_class_weight=True)\n</code></pre> <p>Get tree's coreset data either in a processed format or in the original format. Use the level parameter to control the level of the tree from which samples will be returned. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>int, optional, default 0. Defines the depth level of the tree from which the coreset is extracted. Level 0 returns the coreset from the head of the tree with around coreset_size samples. Level 1 returns the coreset from the level below the head of the tree with around twice of the samples compared to level 0, etc. If the passed level is greater than the maximal level of the tree, the maximal available level is used.</p> <code>0</code> <code>as_orig</code> <code>bool</code> <p>boolean, optional, default False. Should the data be returned in its original format or as a tuple of indices, X, and optionally y. True: data is returned as a pandas DataFrame. False: return a tuple of (indices, X, y) if target was used and (indices, X) when there is no target.</p> <code>False</code> <code>with_index</code> <code>bool</code> <p>boolean, optional, default False. Relevant only when as_orig=True. Should the returned data include the index column.</p> <code>False</code> <code>inverse_class_weight</code> <code>bool</code> <p>boolean, default True. True - return weights / class_weights. False - return weights as they are. Relevant only for classification tasks and only if class_weight was passed in the coreset_params when initializing the class.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Dict</code> <code>dict</code> <p>data: numpy arrays tuple (indices, X, optional y) as_orig=False or as a pandas DataFrame when as_orig=True. w: A numpy array of sample weights. n_represents: number of instances represented by the coreset.</p>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.get_max_level","title":"get_max_level","text":"<pre><code>get_max_level()\n</code></pre> <p>Return the maximal level of the coreset tree. Level 0 is the head of the tree. Level 1 is the level below the head of the tree, etc.</p>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.holdout_validate","title":"holdout_validate","text":"<pre><code>holdout_validate(level=None, validation_size=0.2, model=None, scoring=None, return_model=False, verbose=0, **model_params)\n</code></pre> <p>Method for hold-out validation on the coreset tree. The test set is always the last part of the dataset.</p>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.holdout_validate--parameters","title":"Parameters","text":"int, optional. <p>The level of the tree on which the training and validation will be performed. If None, the best level will be selected. Default: None</p> float, optional. <p>The percentage of the dataset that will be used for testing the model. Default: 0.2</p> A Scikit-learn compatible model instance, optional. <p>When provided, model_params are not relevant. The model class needs to implement the usual scikit-learn interface. Default: instantiate the service model class using input model_params.</p> callable or string, optional. <p>If it is a callable object, it must return a scalar score. The signature of the call is (model, X, y), where model is the ML model to be evaluated, X is the data and y is the ground truth labeling. For example, it can be produced using sklearn.metrics.make_scorer (https://scikit-learn.org/stable/modules/generated/sklearn.metrics.make_scorer.html). If it is a string, it must be a valid name of a Scikit-learn scoring method (see https://scikit-learn.org/stable/modules/model_evaluation.html) If None, the default scorer of the current model is used. Default: None</p> bool, optional. <p>If True, the trained model is also returned. Default: False</p> int, optional. <p>Controls the verbosity: the higher, the more messages.     &gt;=1 : the training and validation time is displayed;     &gt;=2 : the validation score is also displayed;     &gt;=3 : starting time of the computation is also displayed. Default: 0</p> kwargs, optional. <p>The hyper-parameters of the model. If not provided, the default values are used.</p>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.holdout_validate--returns","title":"Returns","text":"<pre><code>The validation score.\nIf return_model=True, the trained model is also returned.\n</code></pre>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.is_dirty","title":"is_dirty","text":"<pre><code>is_dirty()\n</code></pre> <p>Returns:</p> Type Description <code>bool</code> <p>Indicates whether the coreset tree has nodes marked as dirty, meaning they were affected by any of the methods: remove_samples, update_targets, update_features or filter_out_samples, when they were called with force_do_nothing.</p>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.load","title":"load  <code>classmethod</code>","text":"<pre><code>load(dir_path, name=None, *, data_manager=None, load_buffer=True, working_directory=None)\n</code></pre> <p>Restore a service object from a local directory.</p> <p>Parameters:</p> Name Type Description Default <code>dir_path</code> <code>Union[str, os.PathLike]</code> <p>str, path. Local directory where service data is stored.</p> required <code>name</code> <code>str</code> <p>string, optional, default service class name (lower case). The name prefix of the subdirectory to load. When several subdirectories having the same name prefix are found, the last one, ordered by name, is selected. For example when saving with override=False, the chosen subdirectory is the last saved.</p> <code>None</code> <code>data_manager</code> <code>DataManagerT</code> <p>DataManagerBase subclass, optional. When specified, input data manger will be used instead of restoring it from the saved configuration.</p> <code>None</code> <code>load_buffer</code> <code>bool</code> <p>boolean, optional, default True. If set, load saved buffer (a partial node of the tree) from disk and add it to the tree.</p> <code>True</code> <code>working_directory</code> <code>Union[str, os.PathLike]</code> <p>str, path, optional, default use working_directory from saved configuration. Local directory where intermediate data is stored.</p> <code>None</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>CoresetTreeService object</p>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.partial_build","title":"partial_build","text":"<pre><code>partial_build(X, y, indices=None, props=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Add new samples to a coreset tree from parameters X, y, indices and props (properties). All features must be numeric and there should be no missing values.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>array like or iterator of arrays like. An array or an iterator of features. All features must be numeric and there should be no missing values.</p> required <code>y</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like. An array or an iterator of targets.</p> required <code>indices</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator with indices of X.</p> <code>None</code> <code>props</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator of properties. Properties, won\u2019t be used to compute the Coreset or train the model, but it is possible to filter_out_samples on them or to pass them in the select_from_function of get_cleaning_samples.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0: Nodes are created based on input chunks.</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False. False (default) - input data might be updated as result a consequence action like update_targets or update_features. True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.partial_build_from_df","title":"partial_build_from_df","text":"<pre><code>partial_build_from_df(datasets, target_datasets=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Add new samples to a coreset tree based on the pandas DataFrame iterator. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>datasets</code> <code>Union[Iterator[pd.DataFrame], pd.DataFrame]</code> <p>pandas DataFrame or a DataFrame iterator. Data includes features, may include targets and may include indices.</p> required <code>target_datasets</code> <code>Union[Iterator[pd.DataFrame], pd.DataFrame]</code> <p>pandas DataFrame or a DataFrame iterator, optional. Use when data is split to features and target. Should include only one column.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional, default previous used chunk_size. The number of instances used when creating a coreset node in the tree. chunk_size=0: Nodes are created based on input chunks.</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False. False (default) - Input data might be updated as result of functions such as update_targets or update_features. True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.partial_build_from_file","title":"partial_build_from_file","text":"<pre><code>partial_build_from_file(file_path, target_file_path=None, *, reader_f=pd.read_csv, reader_kwargs=None, reader_chunk_size_param_name=None, chunk_size=None, chunk_by=None)\n</code></pre> <p>Add new samples to a coreset tree based on data taken from local storage. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories. Path(s) to the place where data is stored. Data includes features, may include targets and may include indices.</p> required <code>target_file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories, optional. Use when files are split to features and target. Each file should include only one column.</p> <code>None</code> <code>reader_f</code> <code>Callable</code> <p>pandas like read method, optional, default pandas read_csv. For example, to read excel files use pandas read_excel.</p> <code>pd.read_csv</code> <code>reader_kwargs</code> <code>dict</code> <p>dict, optional. Keyword arguments used when calling reader_f method.</p> <code>None</code> <code>reader_chunk_size_param_name</code> <code>str</code> <p>str, optional. reader_f input parameter name for reading file in chunks. When not provided we'll try to figure it out our self. Based on the data, we decide on the optimal chunk size to read and use this parameter as input when calling reader_f. Use \"ignore\" to skip the automatic chunk reading logic.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional, default previous used chunk_size. The number of instances used when creating a coreset node in the tree. chunk_size=0: Nodes are created based on input chunks.</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.plot","title":"plot","text":"<pre><code>plot(dir_path=None, selected_trees=None)\n</code></pre> <p>Produce a tree graph plot and save figure as a local png file.</p> <p>Parameters:</p> Name Type Description Default <code>dir_path</code> <code>Union[str, os.PathLike]</code> <p>string or PathLike. Path to save the plot figure in; if not provided, or if isn't valid/doesn't exist, the figure will be saved in the current directory (from which this method is called).</p> <code>None</code> <code>selected_trees</code> <code>dict</code> <p>dict, optional. A dictionary containing the names of the image file(s) to be generated.</p> <code>None</code> <p>Returns:</p> Type Description <code>pathlib.Path</code> <p>Image file path</p>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.predict","title":"predict","text":"<pre><code>predict(X)\n</code></pre> <p>Run prediction on the trained model. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>An array of features.</p> required <p>Returns:</p> Type Description <p>Model prediction results.</p>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.predict_proba","title":"predict_proba","text":"<pre><code>predict_proba(X)\n</code></pre> <p>Run prediction on the trained model. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>An array of features.</p> required <p>Returns:</p> Type Description <p>Returns the probability of the sample for each class in the model.</p>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.print","title":"print","text":"<pre><code>print(selected_tree=None)\n</code></pre> <p>Print the tree's string representation.</p> <p>Parameters:</p> Name Type Description Default <code>selected_trees</code> <p>string or list. Which tree(s) to print. Defaults to printing all.</p> required"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.remove_samples","title":"remove_samples","text":"<pre><code>remove_samples(indices, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Remove samples from the coreset tree. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>indices</code> <code>Iterable</code> <p>array-like. An array of indices to be removed from the coreset tree.</p> required <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.save","title":"save","text":"<pre><code>save(dir_path=None, name=None, save_buffer=True, override=False, allow_pickle=True)\n</code></pre> <p>Save service configuration and relevant data to a local directory. Use this method when the service needs to be restored.</p> <p>Parameters:</p> Name Type Description Default <code>dir_path</code> <code>Union[str, os.PathLike]</code> <p>string or PathLike, optional, default self.working_directory. A local directory for saving service's files.</p> <code>None</code> <code>name</code> <code>str</code> <p>string, optional, default service class name (lower case). Name of the subdirectory where the data will be stored.</p> <code>None</code> <code>save_buffer</code> <code>bool</code> <p>boolean, default True. Save also the data in the buffer (a partial node of the tree) along with the rest of the saved data.</p> <code>True</code> <code>override</code> <code>bool</code> <p>bool, optional, default False. False: add a timestamp suffix so each save won\u2019t override the previous ones. True: The existing subdirectory with the provided name is overridden.</p> <code>False</code> <code>allow_pickle</code> <code>bool</code> <p>bool, optional, default True. True: Saves the Coreset tree in pickle format (much faster). False: Saves the Coreset tree in JSON format.</p> <code>True</code> <p>Returns:</p> Type Description <code>pathlib.Path</code> <p>Save directory path.</p>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.save_coreset","title":"save_coreset","text":"<pre><code>save_coreset(file_path, level=0, as_orig=False, with_index=False)\n</code></pre> <p>Get coreset from the tree and save to a file along with coreset weights. Use the level parameter to control the level of the tree from which samples will be returned. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[str, os.PathLike]</code> <p>string or PathLike. Local file path to store the coreset.</p> required <code>level</code> <code>int</code> <p>int, optional, default 0. Defines the depth level of the tree from which the coreset is extracted. Level 0 returns the coreset from the head of the tree with around coreset_size samples. Level 1 returns the coreset from the level below the head of the tree with around twice of the samples compared to level 0, etc. If the passed level is greater than the maximal level of the tree, the maximal available level is used.</p> <code>0</code> <code>as_orig</code> <code>bool</code> <p>boolean, optional, default False. True: save in the original format. False: save in a processed format (indices, X, y, weight).</p> <code>False</code> <code>with_index</code> <code>bool</code> <p>boolean, optional, default False. Relevant only when as_orig=True. Save also index column.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.set_seen_indication","title":"set_seen_indication","text":"<pre><code>set_seen_indication(seen_flag=True, indices=None)\n</code></pre> <p>Set samples as 'seen' or 'unseen'. Not providing an indices list defaults to setting the flag on all samples. This function is only applicable in case the coreset tree was optimized_for 'cleaning'.</p> <p>Parameters:</p> Name Type Description Default <code>seen_flag</code> <code>bool</code> <p>bool, optional, default True. Set 'seen' or 'unseen' flag</p> <code>True</code> <code>indices</code> <code>Iterable</code> <p>array like, optional. Set flag only for the provided list of indices. Defaults to all indices.</p> <code>None</code>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.update_dirty","title":"update_dirty","text":"<pre><code>update_dirty(force_resample_all=None, force_sensitivity_recalc=None)\n</code></pre> <p>Calculate the sensitivity and resample the nodes that were marked as dirty, meaning they were affected by any of the methods: remove_samples, update_targets, update_features or filter_out_samples, when they were called with force_do_nothing.</p> <p>Parameters:</p> Name Type Description Default <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.update_features","title":"update_features","text":"<pre><code>update_features(indices, X, feature_names=None, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Update the features for selected samples on the coreset tree. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>indices</code> <code>Iterable</code> <p>array-like. An array of indices to be updated.</p> required <code>X</code> <code>Iterable</code> <p>array-like. An array of features. Should have the same length as indices.</p> required <code>feature_names</code> <code>Iterable[str]</code> <p>If the quantity of features in X is not equal to the quantity of features in the original coreset, this param should contain list of names of passed features.</p> <code>None</code> <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/dtc/#services.coreset_tree.dtc.CoresetTreeServiceDTC.update_targets","title":"update_targets","text":"<pre><code>update_targets(indices, y, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Update the targets for selected samples on the coreset tree. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>indices</code> <code>Iterable</code> <p>array-like. An array of indices to be updated.</p> required <code>y</code> <code>Iterable</code> <p>array-like. An array of classes/labels. Should have the same length as indices.</p> required <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/kmeans/","title":"CoresetTreeServiceKMeans","text":""},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans","title":"CoresetTreeServiceKMeans","text":"<pre><code>CoresetTreeServiceKMeans(*, data_manager=None, data_params=None, n_instances=None, max_memory_gb=None, optimized_for, chunk_size=None, k=8, coreset_size=None, coreset_params=None, working_directory=None, cache_dir=None, node_train_function=None, node_train_function_params=None, node_metadata_func=None, save_all=None)\n</code></pre> <p>         Bases: <code>CoresetTreeServiceUnsupervisedMixin</code>, <code>CoresetTreeService</code></p> <p>Subclass of CoresetTreeService for KMeans. A service class for creating a coreset tree and working with it. optimized_for is a required parameter defining the main usage of the service: 'training', 'cleaning' or both, optimized_for=['training', 'cleaning']. The service will decide whether to build an actual Coreset Tree or to build a single Coreset over the entire dataset, based on the triplet: n_instances, max_memory_gb and the 'number of features' (deduced from the dataset). The chunk_size and coreset_size will be deduced based on the above triplet too. In case chunk_size and coreset_size are provided, they will override all above mentioned parameters (less recommended).</p> <p>When fitting KMeans on the Coreset, it is highly recommended to use the built-in fit function of the CoresetTreeServiceKMeans class. Sklearn uses by default k-means++ as its initialization method. While sklearn's KMeans implementation supports the receipt of sample_weight, the kmeans_plusplus implementation does not. When building the Coreset, samples are selected and weights are assigned to them, therefore, not using these weights will significantly degrade the quality of the results. The fit implementation of the CoresetTreeServiceKMeans solves this problem, by extending kmeans_plusplus to receive sample_weight.</p> <p>Parameters:</p> Name Type Description Default <code>data_manager</code> <code>DataManagerT</code> <p>DataManagerBase subclass, optional. The class used to interact with the provided data and store it locally. By default, only the sampled data is stored in HDF5 files format.</p> <code>None</code> <code>data_params</code> <code>Union[DataParams, dict]</code> <p>DataParams, optional. Preprocessing information.</p> <p>For Example: data_params = {     'index': {'name': 'index_column'} }</p> <code>None</code> <code>n_instances</code> <code>int</code> <p>int. The total number of instances that are going to be processed (can be an estimation). This parameter is required and the only one from the above mentioned quadruplet, which isn't deduced from the data.</p> <code>None</code> <code>max_memory_gb</code> <code>int</code> <p>int, optional. The maximum memory in GB that should be used. When not provided, the server's total memory is used. In any case only 80% of the provided memory or the server's total memory is considered.</p> <code>None</code> <code>optimized_for</code> <code>Union[list, str]</code> <p>str or list Either 'training', 'cleaning' or or both ['training', 'cleaning']. The main usage of the service.</p> required <code>k</code> <p>int, default=8. Only relevant when tree is optimized_for cleaning. The number of clusters to form as well as the number of centroids to generate.</p> <code>8</code> <code>chunk_size</code> <code>Union[dict, int]</code> <p>int, optional. The number of instances to be used when creating a coreset node in the tree. When defined, it will override the parameters of optimized_for, n_instances, n_classes and max_memory_gb. chunk_size=0:  Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>coreset_size</code> <code>Union[int, dict]</code> <p>int, optional. Represents the coreset size of each node in the coreset tree. The coreset is constructed by sampling data instances from the dataset based on their calculated importance. Since each instance may be sampled more than once, in practice, the actual size of the coreset is mostly smaller than coreset_size.</p> <code>None</code> <code>coreset_params</code> <code>Union[CoresetParams, dict]</code> <p>CoresetParams or dict, optional. Coreset algorithm specific parameters.</p> <code>None</code> <code>node_train_function</code> <code>Callable[[np.ndarray, np.ndarray, np.ndarray], Any]</code> <p>Callable, optional. method for training model at tree node level.</p> <code>None</code> <code>node_train_function_params</code> <code>dict</code> <p>dict, optional. kwargs to be used when calling node_train_function.</p> <code>None</code> <code>node_metadata_func</code> <code>Callable[[Tuple[np.ndarray], np.ndarray, Union[list, None]], Union[list, dict, None]]</code> <p>callable, optional. A method for storing user meta data on each node.</p> <code>None</code> <code>working_directory</code> <code>Union[str, os.PathLike]</code> <p>str, path, optional. Local directory where intermediate data is stored.</p> <code>None</code> <code>cache_dir</code> <code>Union[str, os.PathLike]</code> <p>str, path, optional. For internal use when loading a saved service.</p> <code>None</code> <code>save_all</code> <code>bool</code> <p>bool, optional. When set to True, the entire dataset would be saved and not only selected samples. When optimized_for='cleaning' the default is False. When optimized_for='training' the default is True. When both are set the default is True.</p> <code>None</code>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Mask for testing purposes</p>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.tree","title":"tree  <code>property</code>","text":"<pre><code>tree\n</code></pre> <p>Mask for testing purposes Will return the training tree if exists, otherwise the first tree in the trees dict</p>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.build","title":"build","text":"<pre><code>build(X, y=None, indices=None, props=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Create a coreset tree from the parameters X, y, indices and props (properties). build functions may be called only once. To add more data to the coreset tree use one of the partial_build functions. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>array like or iterator of arrays like. An array or an iterator of features. All features must be numeric and there should be no missing values.</p> required <code>y</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator of targets. The target will be ignored when the Coreset is built.</p> <code>None</code> <code>indices</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator with indices of X.</p> <code>None</code> <code>props</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator of properties. Properties, won\u2019t be used to compute the Coreset or train the model, but it is possible to filter_out_samples on them or to pass them in the select_from_function of get_cleaning_samples.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0: Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False. False (default) - Input data might be updated as result of functions such as update_targets or update_features. True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.build_from_df","title":"build_from_df","text":"<pre><code>build_from_df(datasets, target_datasets=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Create a coreset tree from pandas DataFrame(s). build functions may be called only once. To add more data to the coreset tree use one of the partial_build functions. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>datasets</code> <code>Union[Iterator[pd.DataFrame], pd.DataFrame]</code> <p>pandas DataFrame or a DataFrame iterator. Data includes features, may include labels and may include indices.</p> required <code>target_datasets</code> <code>Union[Iterator[Union[pd.DataFrame, pd.Series]], pd.DataFrame, pd.Series]</code> <p>pandas DataFrame or a DataFrame iterator, optional. Use when data is split to features and target. Should include only one column.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0:  Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False. False (default) - Input data might be updated as result of functions such as update_targets or update_features. True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.build_from_file","title":"build_from_file","text":"<pre><code>build_from_file(file_path, target_file_path=None, *, reader_f=pd.read_csv, reader_kwargs=None, reader_chunk_size_param_name=None, chunk_size=None, chunk_by=None)\n</code></pre> <p>Create a coreset tree based on data taken from local storage. build functions may be called only once. To add more data to the coreset tree use one of the partial_build functions. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories. Path(s) to the place where data is stored. Data includes features, may include targets and may include indices.</p> required <code>target_file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories, optional. Use when the dataset files are split to features and target. Each file should include only one column.</p> <code>None</code> <code>reader_f</code> <code>Callable</code> <p>pandas like read method, optional, default pandas read_csv. For example, to read excel files use pandas read_excel.</p> <code>pd.read_csv</code> <code>reader_kwargs</code> <code>dict</code> <p>dict, optional. Keyword arguments used when calling reader_f method.</p> <code>None</code> <code>reader_chunk_size_param_name</code> <code>str</code> <p>str, optional. reader_f input parameter name for reading file in chunks. When not provided we'll try to figure it out our self. Based on the data, we decide on the optimal chunk size to read and use this parameter as input when calling reader_f. Use \"ignore\" to skip the automatic chunk reading logic.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0:  Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.filter_out_samples","title":"filter_out_samples","text":"<pre><code>filter_out_samples(filter_function, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Remove samples from the coreset tree, based on the provided filter function. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>filter_function</code> <code>Callable[[Iterable, Iterable, Union[Iterable, None], Union[Iterable, None]], Iterable[Any]]</code> <p>function, optional. A function that returns a list of indices to be removed from the tree. The function should accept 4 parameters as input: indices, X, y, props and return a list(iterator) of indices to be removed from the coreset tree. For example, in order to remove all instances with a target equal to 6, use the following function: filter_function = lambda indices, X, y, props : indices[y = 6].</p> required <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.fit","title":"fit","text":"<pre><code>fit(level=0, model=None, **model_params)\n</code></pre> <p>Fit a model on the coreset tree. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>Defines the depth level of the tree from which the coreset is extracted. Level 0 returns the coreset from the head of the tree with around coreset_size samples. Level 1 returns the coreset from the level below the head of the tree with around twice of the samples compared to level 0, etc. If the passed level is greater than the maximal level of the tree, the maximal available level is used.</p> <code>0</code> <code>model</code> <code>Any</code> <p>A Scikit-learn compatible model instance, optional. When provided, model_params are not relevant. Default: instantiate the service model class using input model_params.</p> <code>None</code> <code>model_params</code> <p>Model hyperparameters kwargs. Input when instantiating default model class.</p> <code>{}</code> <p>Returns:</p> Type Description <p>Fitted estimator.</p>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.get_cleaning_samples","title":"get_cleaning_samples","text":"<pre><code>get_cleaning_samples(size=None, ignore_indices=None, select_from_indices=None, select_from_function=None, ignore_seen_samples=True)\n</code></pre> <p>Returns indices of samples in descending order of importance. Useful for identifying mislabeled instances and other anomalies in the data. size must be provided. Function must be called after build. This function is only applicable in case the coreset tree was optimized_for 'cleaning'. This function is not for retrieving the coreset (use get_coreset in this case).</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>required, optional. Number of samples to return.</p> <code>None</code> <code>ignore_indices</code> <code>Iterable</code> <p>array-like, optional. An array of indices to ignore when selecting important samples.</p> <code>None</code> <code>select_from_indices</code> <code>Iterable</code> <p>array-like, optional.  An array of indices to consider when selecting important samples.</p> <code>None</code> <code>select_from_function</code> <code>Callable[[Iterable, Iterable, Union[Iterable, None], Union[Iterable, None]], Iterable[Any]]</code> <p>function, optional.  Pass a function in order to limit the selection of the important samples accordingly.  The function should accept 4 parameters as input: indices, X, y, props.  and return a list(iterator) of the desired indices.</p> <code>None</code> <code>ignore_seen_samples</code> <code>bool</code> <p>bool, optional, default True.  Exclude already seen samples and set the seen flag on any indices returned by the function.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Dict</code> <code>Union[ValueError, dict]</code> <p>indices: array-like[int].     Important samples indices. X: array-like[int].     X array. y: array-like[int].     y array. importance: array-like[float].     The importance property. Instances that receive a high Importance in the Coreset computation,     require attention as they usually indicate a labeling error,     anomaly, out-of-distribution problem or other data-related issue.</p>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.get_coreset","title":"get_coreset","text":"<pre><code>get_coreset(level=0, as_orig=False, with_index=False)\n</code></pre> <p>Get tree's coreset data either in a processed format or in the original format. Use the level parameter to control the level of the tree from which samples will be returned. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>int, optional, default 0. Defines the depth level of the tree from which the coreset is extracted. Level 0 returns the coreset from the head of the tree with around coreset_size samples. Level 1 returns the coreset from the level below the head of the tree with around twice of the samples compared to level 0, etc. If the passed level is greater than the maximal level of the tree, the maximal available level is used.</p> <code>0</code> <code>as_orig</code> <code>bool</code> <p>boolean, optional, default False. Should the data be returned in its original format or as a tuple of indices, X, and optionally y. True: data is returned as a pandas DataFrame. False: return a tuple of (indices, X, y) if target was used and (indices, X) when there is no target.</p> <code>False</code> <code>with_index</code> <code>bool</code> <p>boolean, optional, default False. Relevant only when as_orig=True. Should the returned data include the index column.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Dict</code> <code>dict</code> <p>data: numpy arrays tuple (indices, X, optional y) as_orig=False or as a pandas DataFrame when as_orig=True. w: A numpy array of sample weights. n_represents: number of instances represented by the coreset.</p>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.get_max_level","title":"get_max_level","text":"<pre><code>get_max_level()\n</code></pre> <p>Return the maximal level of the coreset tree. Level 0 is the head of the tree. Level 1 is the level below the head of the tree, etc.</p>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.holdout_validate","title":"holdout_validate","text":"<pre><code>holdout_validate(level=None, validation_size=0.2, model=None, scoring=None, return_model=False, verbose=0, **model_params)\n</code></pre> <p>Method for hold-out validation on the coreset tree. The test set is always the last part of the dataset.</p>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.holdout_validate--parameters","title":"Parameters","text":"int, optional. <p>The level of the tree on which the training and validation will be performed. If None, the best level will be selected. Default: None</p> float, optional. <p>The percentage of the dataset that will be used for testing the model. Default: 0.2</p> A Scikit-learn compatible model instance, optional. <p>When provided, model_params are not relevant. The model class needs to implement the usual scikit-learn interface. Default: instantiate the service model class using input model_params.</p> callable or string, optional. <p>If it is a callable object, it must return a scalar score. The signature of the call is (model, X, y), where model is the ML model to be evaluated, X is the data and y is the ground truth labeling. For example, it can be produced using sklearn.metrics.make_scorer (https://scikit-learn.org/stable/modules/generated/sklearn.metrics.make_scorer.html). If it is a string, it must be a valid name of a Scikit-learn scoring method (see https://scikit-learn.org/stable/modules/model_evaluation.html) If None, the default scorer of the current model is used. Default: None</p> bool, optional. <p>If True, the trained model is also returned. Default: False</p> int, optional. <p>Controls the verbosity: the higher, the more messages.     &gt;=1 : the training and validation time is displayed;     &gt;=2 : the validation score is also displayed;     &gt;=3 : starting time of the computation is also displayed. Default: 0</p> kwargs, optional. <p>The hyper-parameters of the model. If not provided, the default values are used.</p>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.holdout_validate--returns","title":"Returns","text":"<pre><code>The validation score.\nIf return_model=True, the trained model is also returned.\n</code></pre>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.is_dirty","title":"is_dirty","text":"<pre><code>is_dirty()\n</code></pre> <p>Returns:</p> Type Description <code>bool</code> <p>Indicates whether the coreset tree has nodes marked as dirty, meaning they were affected by any of the methods: remove_samples, update_targets, update_features or filter_out_samples, when they were called with force_do_nothing.</p>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.load","title":"load  <code>classmethod</code>","text":"<pre><code>load(dir_path, name=None, *, data_manager=None, load_buffer=True, working_directory=None)\n</code></pre> <p>Restore a service object from a local directory.</p> <p>Parameters:</p> Name Type Description Default <code>dir_path</code> <code>Union[str, os.PathLike]</code> <p>str, path. Local directory where service data is stored.</p> required <code>name</code> <code>str</code> <p>string, optional, default service class name (lower case). The name prefix of the subdirectory to load. When several subdirectories having the same name prefix are found, the last one, ordered by name, is selected. For example when saving with override=False, the chosen subdirectory is the last saved.</p> <code>None</code> <code>data_manager</code> <code>DataManagerT</code> <p>DataManagerBase subclass, optional. When specified, input data manger will be used instead of restoring it from the saved configuration.</p> <code>None</code> <code>load_buffer</code> <code>bool</code> <p>boolean, optional, default True. If set, load saved buffer (a partial node of the tree) from disk and add it to the tree.</p> <code>True</code> <code>working_directory</code> <code>Union[str, os.PathLike]</code> <p>str, path, optional, default use working_directory from saved configuration. Local directory where intermediate data is stored.</p> <code>None</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>CoresetTreeService object</p>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.partial_build","title":"partial_build","text":"<pre><code>partial_build(X, y=None, indices=None, props=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Add new samples to a coreset tree from parameters X, y, indices and props (properties). All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>array like or iterator of arrays like. An array or an iterator of features. All features must be numeric and there should be no missing values.</p> required <code>y</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator of targets. The target will be ignored when the Coreset is built.</p> <code>None</code> <code>indices</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator with indices of X.</p> <code>None</code> <code>props</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator of properties. Properties, won\u2019t be used to compute the Coreset or train the model, but it is possible to filter_out_samples on them or to pass them in the select_from_function of get_cleaning_samples.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0: Nodes are created based on input chunks.</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False False (default) - Input data might be updated as result of functions such as update_targets or update_features. True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.partial_build_from_df","title":"partial_build_from_df","text":"<pre><code>partial_build_from_df(datasets, target_datasets=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Add new samples to a coreset tree based on the pandas DataFrame iterator. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>datasets</code> <code>Union[Iterator[pd.DataFrame], pd.DataFrame]</code> <p>pandas DataFrame or a DataFrame iterator. Data includes features, may include targets and may include indices.</p> required <code>target_datasets</code> <code>Union[Iterator[pd.DataFrame], pd.DataFrame]</code> <p>pandas DataFrame or a DataFrame iterator, optional. Use when data is split to features and target. Should include only one column.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional, default previous used chunk_size. The number of instances used when creating a coreset node in the tree. chunk_size=0: Nodes are created based on input chunks.</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False. False (default) - Input data might be updated as result of functions such as update_targets or update_features. True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.partial_build_from_file","title":"partial_build_from_file","text":"<pre><code>partial_build_from_file(file_path, target_file_path=None, *, reader_f=pd.read_csv, reader_kwargs=None, reader_chunk_size_param_name=None, chunk_size=None, chunk_by=None)\n</code></pre> <p>Add new samples to a coreset tree based on data taken from local storage. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories. Path(s) to the place where data is stored. Data includes features, may include targets and may include indices.</p> required <code>target_file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories, optional. Use when files are split to features and target. Each file should include only one column.</p> <code>None</code> <code>reader_f</code> <code>Callable</code> <p>pandas like read method, optional, default pandas read_csv. For example, to read excel files use pandas read_excel.</p> <code>pd.read_csv</code> <code>reader_kwargs</code> <code>dict</code> <p>dict, optional. Keyword arguments used when calling reader_f method.</p> <code>None</code> <code>reader_chunk_size_param_name</code> <code>str</code> <p>str, optional. reader_f input parameter name for reading file in chunks. When not provided we'll try to figure it out our self. Based on the data, we decide on the optimal chunk size to read and use this parameter as input when calling reader_f. Use \"ignore\" to skip the automatic chunk reading logic.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional, default previous used chunk_size. The number of instances used when creating a coreset node in the tree. chunk_size=0: Nodes are created based on input chunks.</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.plot","title":"plot","text":"<pre><code>plot(dir_path=None, selected_trees=None)\n</code></pre> <p>Produce a tree graph plot and save figure as a local png file.</p> <p>Parameters:</p> Name Type Description Default <code>dir_path</code> <code>Union[str, os.PathLike]</code> <p>string or PathLike. Path to save the plot figure in; if not provided, or if isn't valid/doesn't exist, the figure will be saved in the current directory (from which this method is called).</p> <code>None</code> <code>selected_trees</code> <code>dict</code> <p>dict, optional. A dictionary containing the names of the image file(s) to be generated.</p> <code>None</code> <p>Returns:</p> Type Description <code>pathlib.Path</code> <p>Image file path</p>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.predict","title":"predict","text":"<pre><code>predict(X)\n</code></pre> <p>Run prediction on the trained model. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>An array of features.</p> required <p>Returns:</p> Type Description <p>Model prediction results.</p>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.predict_proba","title":"predict_proba","text":"<pre><code>predict_proba(X)\n</code></pre> <p>Run prediction on the trained model. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>An array of features.</p> required <p>Returns:</p> Type Description <p>Returns the probability of the sample for each class in the model.</p>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.print","title":"print","text":"<pre><code>print(selected_tree=None)\n</code></pre> <p>Print the tree's string representation.</p> <p>Parameters:</p> Name Type Description Default <code>selected_trees</code> <p>string or list. Which tree(s) to print. Defaults to printing all.</p> required"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.remove_samples","title":"remove_samples","text":"<pre><code>remove_samples(indices, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Remove samples from the coreset tree. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>indices</code> <code>Iterable</code> <p>array-like. An array of indices to be removed from the coreset tree.</p> required <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.save","title":"save","text":"<pre><code>save(dir_path=None, name=None, save_buffer=True, override=False, allow_pickle=True)\n</code></pre> <p>Save service configuration and relevant data to a local directory. Use this method when the service needs to be restored.</p> <p>Parameters:</p> Name Type Description Default <code>dir_path</code> <code>Union[str, os.PathLike]</code> <p>string or PathLike, optional, default self.working_directory. A local directory for saving service's files.</p> <code>None</code> <code>name</code> <code>str</code> <p>string, optional, default service class name (lower case). Name of the subdirectory where the data will be stored.</p> <code>None</code> <code>save_buffer</code> <code>bool</code> <p>boolean, default True. Save also the data in the buffer (a partial node of the tree) along with the rest of the saved data.</p> <code>True</code> <code>override</code> <code>bool</code> <p>bool, optional, default False. False: add a timestamp suffix so each save won\u2019t override the previous ones. True: The existing subdirectory with the provided name is overridden.</p> <code>False</code> <code>allow_pickle</code> <code>bool</code> <p>bool, optional, default True. True: Saves the Coreset tree in pickle format (much faster). False: Saves the Coreset tree in JSON format.</p> <code>True</code> <p>Returns:</p> Type Description <code>pathlib.Path</code> <p>Save directory path.</p>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.save_coreset","title":"save_coreset","text":"<pre><code>save_coreset(file_path, level=0, as_orig=False, with_index=False)\n</code></pre> <p>Get coreset from the tree and save to a file along with coreset weights. Use the level parameter to control the level of the tree from which samples will be returned. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[str, os.PathLike]</code> <p>string or PathLike. Local file path to store the coreset.</p> required <code>level</code> <code>int</code> <p>int, optional, default 0. Defines the depth level of the tree from which the coreset is extracted. Level 0 returns the coreset from the head of the tree with around coreset_size samples. Level 1 returns the coreset from the level below the head of the tree with around twice of the samples compared to level 0, etc. If the passed level is greater than the maximal level of the tree, the maximal available level is used.</p> <code>0</code> <code>as_orig</code> <code>bool</code> <p>boolean, optional, default False. True: save in the original format. False: save in a processed format (indices, X, y, weight).</p> <code>False</code> <code>with_index</code> <code>bool</code> <p>boolean, optional, default False. Relevant only when as_orig=True. Save also index column.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.set_seen_indication","title":"set_seen_indication","text":"<pre><code>set_seen_indication(seen_flag=True, indices=None)\n</code></pre> <p>Set samples as 'seen' or 'unseen'. Not providing an indices list defaults to setting the flag on all samples. This function is only applicable in case the coreset tree was optimized_for 'cleaning'.</p> <p>Parameters:</p> Name Type Description Default <code>seen_flag</code> <code>bool</code> <p>bool, optional, default True. Set 'seen' or 'unseen' flag</p> <code>True</code> <code>indices</code> <code>Iterable</code> <p>array like, optional. Set flag only for the provided list of indices. Defaults to all indices.</p> <code>None</code>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.update_dirty","title":"update_dirty","text":"<pre><code>update_dirty(force_resample_all=None, force_sensitivity_recalc=None)\n</code></pre> <p>Calculate the sensitivity and resample the nodes that were marked as dirty, meaning they were affected by any of the methods: remove_samples, update_targets, update_features or filter_out_samples, when they were called with force_do_nothing.</p> <p>Parameters:</p> Name Type Description Default <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.update_features","title":"update_features","text":"<pre><code>update_features(indices, X, feature_names=None, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Update the features for selected samples on the coreset tree. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>indices</code> <code>Iterable</code> <p>array-like. An array of indices to be updated.</p> required <code>X</code> <code>Iterable</code> <p>array-like. An array of features. Should have the same length as indices.</p> required <code>feature_names</code> <code>Iterable[str]</code> <p>If the quantity of features in X is not equal to the quantity of features in the original coreset, this param should contain list of names of passed features.</p> <code>None</code> <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/kmeans/#services.coreset_tree.kmeans.CoresetTreeServiceKMeans.update_targets","title":"update_targets","text":"<pre><code>update_targets(indices, y, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Update the targets for selected samples on the coreset tree. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>indices</code> <code>Iterable</code> <p>array-like. An array of indices to be updated.</p> required <code>y</code> <code>Iterable</code> <p>array-like. An array of classes/labels. Should have the same length as indices.</p> required <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/lg/","title":"CoresetTreeServiceLG","text":""},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG","title":"CoresetTreeServiceLG","text":"<pre><code>CoresetTreeServiceLG(*, data_manager=None, data_params=None, n_instances=None, max_memory_gb=None, n_classes=None, optimized_for, chunk_size=None, coreset_size=None, coreset_params=None, sample_all=None, working_directory=None, cache_dir=None, node_train_function=None, node_train_function_params=None, node_metadata_func=None, save_all=None)\n</code></pre> <p>         Bases: <code>CoresetTreeServiceClassifierMixin</code>, <code>CoresetTreeServiceSupervisedMixin</code>, <code>CoresetTreeService</code></p> <p>Subclass of CoresetTreeService for Logistic Regression. A service class for creating a coreset tree and working with it. optimized_for is a required parameter defining the main usage of the service: 'training', 'cleaning' or both, optimized_for=['training', 'cleaning']. The service will decide whether to build an actual Coreset Tree or to build a single Coreset over the entire dataset, based on the quadruplet: n_instances, n_classes, max_memory_gb and the 'number of features' (deduced from the dataset). The chunk_size and coreset_size will be deduced based on the above quadruplet too. In case chunk_size and coreset_size are provided, they will override all above mentioned parameters (less recommended).</p> <p>If you intend passing class_weight to your classifier, it is recommended to pass it as a parameter to the class in coreset_params (see example below), so the coreset can be built while taking into account the class_weight. You can continue passing class_weight to your classifier, while retrieving the coreset using the get_coreset method with the parameter inverse_class_weight set to True (default). If you wish to stop passing class_weight to the classifier, retrieve the coreset using the get_coreset method with the parameter inverse_class_weight set to False.</p> <p>Parameters:</p> Name Type Description Default <code>data_manager</code> <code>DataManagerT</code> <p>DataManagerBase subclass, optional. The class used to interact with the provided data and store it locally. By default, only the sampled data is stored in HDF5 files format.</p> <code>None</code> <code>data_params</code> <code>Union[DataParams, dict]</code> <p>DataParams, optional. Preprocessing information.</p> <p>For Example: data_params = {     'target': {'name': 'Cover_Type'},     'index': {'name': 'index_column'} }</p> <code>None</code> <code>n_instances</code> <code>int</code> <p>int. The total number of instances that are going to be processed (can be an estimation). This parameter is required and the only one from the above mentioned quadruplet, which isn't deduced from the data.</p> <code>None</code> <code>n_classes</code> <code>int</code> <p>int. The total number of classes (labels). When not provided, will be deduced from the provided data. When multiple files are provided n_classes will be deduced based on the first file only.</p> <code>None</code> <code>max_memory_gb</code> <code>int</code> <p>int, optional. The maximum memory in GB that should be used. When not provided, the server's total memory is used. In any case only 80% of the provided memory or the server's total memory is considered.</p> <code>None</code> <code>optimized_for</code> <code>Union[list, str]</code> <p>str or list Either 'training', 'cleaning' or or both ['training', 'cleaning']. The main usage of the service.</p> required <code>chunk_size</code> <code>Union[dict, int]</code> <p>int, optional. The number of instances to be used when creating a coreset node in the tree. When defined, it will override the parameters of optimized_for, n_instances, n_classes and max_memory_gb. chunk_size=0:  Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>coreset_size</code> <code>Union[int, dict]</code> <p>int, optional. Represents the coreset size of each node in the coreset tree. The coreset is constructed by sampling data instances from the dataset based on their calculated importance. Since each instance may be sampled more than once, in practice, the actual size of the coreset is mostly smaller than coreset_size.</p> <code>None</code> <code>sample_all</code> <code>Union[Iterable, dict]</code> <p>iterable, optional. Relevant for classification tasks only. A list of classes for which all instances should be taken, instead of applying sampling.</p> <code>None</code> <code>coreset_params</code> <code>Union[CoresetParams, dict]</code> <p>CoresetParams or dict, optional. Coreset algorithm specific parameters.</p> <p>For example: coreset_params = {     \"class_weight\": {\"a\": 0.5, \"b\": 0.5} }</p> <code>None</code> <code>node_train_function</code> <code>Callable[[np.ndarray, np.ndarray, np.ndarray], Any]</code> <p>Callable, optional. method for training model at tree node level.</p> <code>None</code> <code>node_train_function_params</code> <code>dict</code> <p>dict, optional. kwargs to be used when calling node_train_function.</p> <code>None</code> <code>node_metadata_func</code> <code>Callable[[Tuple[np.ndarray], np.ndarray, Union[list, None]], Union[list, dict, None]]</code> <p>callable, optional. A method for storing user meta data on each node.</p> <code>None</code> <code>working_directory</code> <code>Union[str, os.PathLike]</code> <p>str, path, optional. Local directory where intermediate data is stored.</p> <code>None</code> <code>cache_dir</code> <code>Union[str, os.PathLike]</code> <p>str, path, optional. For internal use when loading a saved service.</p> <code>None</code> <code>save_all</code> <code>bool</code> <p>bool, optional. When set to True, the entire dataset would be saved and not only selected samples. When optimized_for='cleaning' the default is False. When optimized_for='training' the default is True. When both are set the default is True.</p> <code>None</code>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Mask for testing purposes</p>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.tree","title":"tree  <code>property</code>","text":"<pre><code>tree\n</code></pre> <p>Mask for testing purposes Will return the training tree if exists, otherwise the first tree in the trees dict</p>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.build","title":"build","text":"<pre><code>build(X, y, indices=None, props=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Create a coreset tree from the parameters X, y, indices and props (properties). build functions may be called only once. To add more data to the coreset tree use one of the partial_build functions. All features must be numeric and there should be no missing values.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>array like or iterator of arrays like. An array or an iterator of features. All features must be numeric and there should be no missing values.</p> required <code>y</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like. An array or an iterator of targets.</p> required <code>indices</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator with indices of X.</p> <code>None</code> <code>props</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator of properties. Properties, won\u2019t be used to compute the Coreset or train the model, but it is possible to filter_out_samples on them or to pass them in the select_from_function of get_cleaning_samples.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0:  Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False. False (default) - input data might be updated as result a consequence action like update_targets or update_features True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.build_from_df","title":"build_from_df","text":"<pre><code>build_from_df(datasets, target_datasets=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Create a coreset tree from pandas DataFrame(s). build functions may be called only once. To add more data to the coreset tree use one of the partial_build functions. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>datasets</code> <code>Union[Iterator[pd.DataFrame], pd.DataFrame]</code> <p>pandas DataFrame or a DataFrame iterator. Data includes features, may include labels and may include indices.</p> required <code>target_datasets</code> <code>Union[Iterator[Union[pd.DataFrame, pd.Series]], pd.DataFrame, pd.Series]</code> <p>pandas DataFrame or a DataFrame iterator, optional. Use when data is split to features and target. Should include only one column.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0:  Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False. False (default) - Input data might be updated as result of functions such as update_targets or update_features. True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.build_from_file","title":"build_from_file","text":"<pre><code>build_from_file(file_path, target_file_path=None, *, reader_f=pd.read_csv, reader_kwargs=None, reader_chunk_size_param_name=None, chunk_size=None, chunk_by=None)\n</code></pre> <p>Create a coreset tree based on data taken from local storage. build functions may be called only once. To add more data to the coreset tree use one of the partial_build functions. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories. Path(s) to the place where data is stored. Data includes features, may include targets and may include indices.</p> required <code>target_file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories, optional. Use when the dataset files are split to features and target. Each file should include only one column.</p> <code>None</code> <code>reader_f</code> <code>Callable</code> <p>pandas like read method, optional, default pandas read_csv. For example, to read excel files use pandas read_excel.</p> <code>pd.read_csv</code> <code>reader_kwargs</code> <code>dict</code> <p>dict, optional. Keyword arguments used when calling reader_f method.</p> <code>None</code> <code>reader_chunk_size_param_name</code> <code>str</code> <p>str, optional. reader_f input parameter name for reading file in chunks. When not provided we'll try to figure it out our self. Based on the data, we decide on the optimal chunk size to read and use this parameter as input when calling reader_f. Use \"ignore\" to skip the automatic chunk reading logic.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0:  Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.filter_out_samples","title":"filter_out_samples","text":"<pre><code>filter_out_samples(filter_function, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Remove samples from the coreset tree, based on the provided filter function. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>filter_function</code> <code>Callable[[Iterable, Iterable, Union[Iterable, None], Union[Iterable, None]], Iterable[Any]]</code> <p>function, optional. A function that returns a list of indices to be removed from the tree. The function should accept 4 parameters as input: indices, X, y, props and return a list(iterator) of indices to be removed from the coreset tree. For example, in order to remove all instances with a target equal to 6, use the following function: filter_function = lambda indices, X, y, props : indices[y = 6].</p> required <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.fit","title":"fit","text":"<pre><code>fit(level=0, model=None, **model_params)\n</code></pre> <p>Fit a model on the coreset tree. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>Defines the depth level of the tree from which the coreset is extracted. Level 0 returns the coreset from the head of the tree with around coreset_size samples. Level 1 returns the coreset from the level below the head of the tree with around twice of the samples compared to level 0, etc. If the passed level is greater than the maximal level of the tree, the maximal available level is used.</p> <code>0</code> <code>model</code> <code>Any</code> <p>A Scikit-learn compatible model instance, optional. When provided, model_params are not relevant. Default: instantiate the service model class using input model_params.</p> <code>None</code> <code>model_params</code> <p>Model hyperparameters kwargs. Input when instantiating default model class.</p> <code>{}</code> <p>Returns:</p> Type Description <p>Fitted estimator.</p>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.get_cleaning_samples","title":"get_cleaning_samples","text":"<pre><code>get_cleaning_samples(size=None, class_size=None, ignore_indices=None, select_from_indices=None, select_from_function=None, ignore_seen_samples=True)\n</code></pre> <p>Returns indices of samples in descending order of importance. Useful for identifying mislabeled instances and other anomalies in the data. Either class_size (recommended) or size must be provided. Must be called after build. This function is only applicable in case the coreset tree was optimized_for 'cleaning'. This function is not for retrieving the coreset (use get_coreset in this case).</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>int, optional Number of samples to return. When class_size is provided, remaining samples are taken from classes not appearing in class_size dictionary.</p> <code>None</code> <code>class_size</code> <code>Dict[Any, Union[int, str]]</code> <p>dict {class: int or \"all\" or \"any\"}, optional. Controls the number of samples to choose for each class. int: return at most size. \"all\": return all samples. \"any\": limits the returned samples to the specified classes.</p> <code>None</code> <code>ignore_indices</code> <code>Iterable</code> <p>array-like, optional. An array of indices to ignore when selecting important samples.</p> <code>None</code> <code>select_from_indices</code> <code>Iterable</code> <p>array-like, optional.  An array of indices to consider when selecting important samples.</p> <code>None</code> <code>select_from_function</code> <code>Callable[[Iterable, Iterable, Union[Iterable, None], Union[Iterable, None]], Iterable[Any]]</code> <p>function, optional.  Pass a function in order to limit the selection of the important samples accordingly.  The function should accept 4 parameters as input: indices, X, y, properties  and return a list(iterator) of the desired indices.</p> <code>None</code> <code>ignore_seen_samples</code> <code>bool</code> <p>bool, optional, default True.  Exclude already seen samples and set the seen flag on any indices returned by the function.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Dict</code> <code>Union[ValueError, dict]</code> <p>indices: array-like[int].     Important samples indices. X: array-like[int].     X array. y: array-like[int].     y array. importance: array-like[float].     The importance property. Instances that receive a high Importance in the Coreset computation,     require attention as they usually indicate a labeling error,     anomaly, out-of-distribution problem or other data-related issue.</p>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.get_cleaning_samples--examples","title":"Examples","text":"Input <p>size=100, class_size={\"class A\": 10, \"class B\": 50, \"class C\": \"all\"}</p> Output <p>10 of \"class A\", 50 of \"class B\", 12 of \"class C\" (all), 28 of \"class D/E\"</p>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.get_coreset","title":"get_coreset","text":"<pre><code>get_coreset(level=0, as_orig=False, with_index=False, inverse_class_weight=True)\n</code></pre> <p>Get tree's coreset data either in a processed format or in the original format. Use the level parameter to control the level of the tree from which samples will be returned. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>int, optional, default 0. Defines the depth level of the tree from which the coreset is extracted. Level 0 returns the coreset from the head of the tree with around coreset_size samples. Level 1 returns the coreset from the level below the head of the tree with around twice of the samples compared to level 0, etc. If the passed level is greater than the maximal level of the tree, the maximal available level is used.</p> <code>0</code> <code>as_orig</code> <code>bool</code> <p>boolean, optional, default False. Should the data be returned in its original format or as a tuple of indices, X, and optionally y. True: data is returned as a pandas DataFrame. False: return a tuple of (indices, X, y) if target was used and (indices, X) when there is no target.</p> <code>False</code> <code>with_index</code> <code>bool</code> <p>boolean, optional, default False. Relevant only when as_orig=True. Should the returned data include the index column.</p> <code>False</code> <code>inverse_class_weight</code> <code>bool</code> <p>boolean, default True. True - return weights / class_weights. False - return weights as they are. Relevant only for classification tasks and only if class_weight was passed in the coreset_params when initializing the class.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Dict</code> <code>dict</code> <p>data: numpy arrays tuple (indices, X, optional y) as_orig=False or as a pandas DataFrame when as_orig=True. w: A numpy array of sample weights. n_represents: number of instances represented by the coreset.</p>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.get_max_level","title":"get_max_level","text":"<pre><code>get_max_level()\n</code></pre> <p>Return the maximal level of the coreset tree. Level 0 is the head of the tree. Level 1 is the level below the head of the tree, etc.</p>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.holdout_validate","title":"holdout_validate","text":"<pre><code>holdout_validate(level=None, validation_size=0.2, model=None, scoring=None, return_model=False, verbose=0, **model_params)\n</code></pre> <p>Method for hold-out validation on the coreset tree. The test set is always the last part of the dataset.</p>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.holdout_validate--parameters","title":"Parameters","text":"int, optional. <p>The level of the tree on which the training and validation will be performed. If None, the best level will be selected. Default: None</p> float, optional. <p>The percentage of the dataset that will be used for testing the model. Default: 0.2</p> A Scikit-learn compatible model instance, optional. <p>When provided, model_params are not relevant. The model class needs to implement the usual scikit-learn interface. Default: instantiate the service model class using input model_params.</p> callable or string, optional. <p>If it is a callable object, it must return a scalar score. The signature of the call is (model, X, y), where model is the ML model to be evaluated, X is the data and y is the ground truth labeling. For example, it can be produced using sklearn.metrics.make_scorer (https://scikit-learn.org/stable/modules/generated/sklearn.metrics.make_scorer.html). If it is a string, it must be a valid name of a Scikit-learn scoring method (see https://scikit-learn.org/stable/modules/model_evaluation.html) If None, the default scorer of the current model is used. Default: None</p> bool, optional. <p>If True, the trained model is also returned. Default: False</p> int, optional. <p>Controls the verbosity: the higher, the more messages.     &gt;=1 : the training and validation time is displayed;     &gt;=2 : the validation score is also displayed;     &gt;=3 : starting time of the computation is also displayed. Default: 0</p> kwargs, optional. <p>The hyper-parameters of the model. If not provided, the default values are used.</p>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.holdout_validate--returns","title":"Returns","text":"<pre><code>The validation score.\nIf return_model=True, the trained model is also returned.\n</code></pre>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.is_dirty","title":"is_dirty","text":"<pre><code>is_dirty()\n</code></pre> <p>Returns:</p> Type Description <code>bool</code> <p>Indicates whether the coreset tree has nodes marked as dirty, meaning they were affected by any of the methods: remove_samples, update_targets, update_features or filter_out_samples, when they were called with force_do_nothing.</p>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.load","title":"load  <code>classmethod</code>","text":"<pre><code>load(dir_path, name=None, *, data_manager=None, load_buffer=True, working_directory=None)\n</code></pre> <p>Restore a service object from a local directory.</p> <p>Parameters:</p> Name Type Description Default <code>dir_path</code> <code>Union[str, os.PathLike]</code> <p>str, path. Local directory where service data is stored.</p> required <code>name</code> <code>str</code> <p>string, optional, default service class name (lower case). The name prefix of the subdirectory to load. When several subdirectories having the same name prefix are found, the last one, ordered by name, is selected. For example when saving with override=False, the chosen subdirectory is the last saved.</p> <code>None</code> <code>data_manager</code> <code>DataManagerT</code> <p>DataManagerBase subclass, optional. When specified, input data manger will be used instead of restoring it from the saved configuration.</p> <code>None</code> <code>load_buffer</code> <code>bool</code> <p>boolean, optional, default True. If set, load saved buffer (a partial node of the tree) from disk and add it to the tree.</p> <code>True</code> <code>working_directory</code> <code>Union[str, os.PathLike]</code> <p>str, path, optional, default use working_directory from saved configuration. Local directory where intermediate data is stored.</p> <code>None</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>CoresetTreeService object</p>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.partial_build","title":"partial_build","text":"<pre><code>partial_build(X, y, indices=None, props=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Add new samples to a coreset tree from parameters X, y, indices and props (properties). All features must be numeric and there should be no missing values.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>array like or iterator of arrays like. An array or an iterator of features. All features must be numeric and there should be no missing values.</p> required <code>y</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like. An array or an iterator of targets.</p> required <code>indices</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator with indices of X.</p> <code>None</code> <code>props</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator of properties. Properties, won\u2019t be used to compute the Coreset or train the model, but it is possible to filter_out_samples on them or to pass them in the select_from_function of get_cleaning_samples.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0: Nodes are created based on input chunks.</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False. False (default) - input data might be updated as result a consequence action like update_targets or update_features. True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.partial_build_from_df","title":"partial_build_from_df","text":"<pre><code>partial_build_from_df(datasets, target_datasets=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Add new samples to a coreset tree based on the pandas DataFrame iterator. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>datasets</code> <code>Union[Iterator[pd.DataFrame], pd.DataFrame]</code> <p>pandas DataFrame or a DataFrame iterator. Data includes features, may include targets and may include indices.</p> required <code>target_datasets</code> <code>Union[Iterator[pd.DataFrame], pd.DataFrame]</code> <p>pandas DataFrame or a DataFrame iterator, optional. Use when data is split to features and target. Should include only one column.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional, default previous used chunk_size. The number of instances used when creating a coreset node in the tree. chunk_size=0: Nodes are created based on input chunks.</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False. False (default) - Input data might be updated as result of functions such as update_targets or update_features. True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.partial_build_from_file","title":"partial_build_from_file","text":"<pre><code>partial_build_from_file(file_path, target_file_path=None, *, reader_f=pd.read_csv, reader_kwargs=None, reader_chunk_size_param_name=None, chunk_size=None, chunk_by=None)\n</code></pre> <p>Add new samples to a coreset tree based on data taken from local storage. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories. Path(s) to the place where data is stored. Data includes features, may include targets and may include indices.</p> required <code>target_file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories, optional. Use when files are split to features and target. Each file should include only one column.</p> <code>None</code> <code>reader_f</code> <code>Callable</code> <p>pandas like read method, optional, default pandas read_csv. For example, to read excel files use pandas read_excel.</p> <code>pd.read_csv</code> <code>reader_kwargs</code> <code>dict</code> <p>dict, optional. Keyword arguments used when calling reader_f method.</p> <code>None</code> <code>reader_chunk_size_param_name</code> <code>str</code> <p>str, optional. reader_f input parameter name for reading file in chunks. When not provided we'll try to figure it out our self. Based on the data, we decide on the optimal chunk size to read and use this parameter as input when calling reader_f. Use \"ignore\" to skip the automatic chunk reading logic.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional, default previous used chunk_size. The number of instances used when creating a coreset node in the tree. chunk_size=0: Nodes are created based on input chunks.</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.plot","title":"plot","text":"<pre><code>plot(dir_path=None, selected_trees=None)\n</code></pre> <p>Produce a tree graph plot and save figure as a local png file.</p> <p>Parameters:</p> Name Type Description Default <code>dir_path</code> <code>Union[str, os.PathLike]</code> <p>string or PathLike. Path to save the plot figure in; if not provided, or if isn't valid/doesn't exist, the figure will be saved in the current directory (from which this method is called).</p> <code>None</code> <code>selected_trees</code> <code>dict</code> <p>dict, optional. A dictionary containing the names of the image file(s) to be generated.</p> <code>None</code> <p>Returns:</p> Type Description <code>pathlib.Path</code> <p>Image file path</p>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.predict","title":"predict","text":"<pre><code>predict(X)\n</code></pre> <p>Run prediction on the trained model. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>An array of features.</p> required <p>Returns:</p> Type Description <p>Model prediction results.</p>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.predict_proba","title":"predict_proba","text":"<pre><code>predict_proba(X)\n</code></pre> <p>Run prediction on the trained model. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>An array of features.</p> required <p>Returns:</p> Type Description <p>Returns the probability of the sample for each class in the model.</p>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.print","title":"print","text":"<pre><code>print(selected_tree=None)\n</code></pre> <p>Print the tree's string representation.</p> <p>Parameters:</p> Name Type Description Default <code>selected_trees</code> <p>string or list. Which tree(s) to print. Defaults to printing all.</p> required"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.remove_samples","title":"remove_samples","text":"<pre><code>remove_samples(indices, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Remove samples from the coreset tree. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>indices</code> <code>Iterable</code> <p>array-like. An array of indices to be removed from the coreset tree.</p> required <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.save","title":"save","text":"<pre><code>save(dir_path=None, name=None, save_buffer=True, override=False, allow_pickle=True)\n</code></pre> <p>Save service configuration and relevant data to a local directory. Use this method when the service needs to be restored.</p> <p>Parameters:</p> Name Type Description Default <code>dir_path</code> <code>Union[str, os.PathLike]</code> <p>string or PathLike, optional, default self.working_directory. A local directory for saving service's files.</p> <code>None</code> <code>name</code> <code>str</code> <p>string, optional, default service class name (lower case). Name of the subdirectory where the data will be stored.</p> <code>None</code> <code>save_buffer</code> <code>bool</code> <p>boolean, default True. Save also the data in the buffer (a partial node of the tree) along with the rest of the saved data.</p> <code>True</code> <code>override</code> <code>bool</code> <p>bool, optional, default False. False: add a timestamp suffix so each save won\u2019t override the previous ones. True: The existing subdirectory with the provided name is overridden.</p> <code>False</code> <code>allow_pickle</code> <code>bool</code> <p>bool, optional, default True. True: Saves the Coreset tree in pickle format (much faster). False: Saves the Coreset tree in JSON format.</p> <code>True</code> <p>Returns:</p> Type Description <code>pathlib.Path</code> <p>Save directory path.</p>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.save_coreset","title":"save_coreset","text":"<pre><code>save_coreset(file_path, level=0, as_orig=False, with_index=False)\n</code></pre> <p>Get coreset from the tree and save to a file along with coreset weights. Use the level parameter to control the level of the tree from which samples will be returned. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[str, os.PathLike]</code> <p>string or PathLike. Local file path to store the coreset.</p> required <code>level</code> <code>int</code> <p>int, optional, default 0. Defines the depth level of the tree from which the coreset is extracted. Level 0 returns the coreset from the head of the tree with around coreset_size samples. Level 1 returns the coreset from the level below the head of the tree with around twice of the samples compared to level 0, etc. If the passed level is greater than the maximal level of the tree, the maximal available level is used.</p> <code>0</code> <code>as_orig</code> <code>bool</code> <p>boolean, optional, default False. True: save in the original format. False: save in a processed format (indices, X, y, weight).</p> <code>False</code> <code>with_index</code> <code>bool</code> <p>boolean, optional, default False. Relevant only when as_orig=True. Save also index column.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.set_seen_indication","title":"set_seen_indication","text":"<pre><code>set_seen_indication(seen_flag=True, indices=None)\n</code></pre> <p>Set samples as 'seen' or 'unseen'. Not providing an indices list defaults to setting the flag on all samples. This function is only applicable in case the coreset tree was optimized_for 'cleaning'.</p> <p>Parameters:</p> Name Type Description Default <code>seen_flag</code> <code>bool</code> <p>bool, optional, default True. Set 'seen' or 'unseen' flag</p> <code>True</code> <code>indices</code> <code>Iterable</code> <p>array like, optional. Set flag only for the provided list of indices. Defaults to all indices.</p> <code>None</code>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.update_dirty","title":"update_dirty","text":"<pre><code>update_dirty(force_resample_all=None, force_sensitivity_recalc=None)\n</code></pre> <p>Calculate the sensitivity and resample the nodes that were marked as dirty, meaning they were affected by any of the methods: remove_samples, update_targets, update_features or filter_out_samples, when they were called with force_do_nothing.</p> <p>Parameters:</p> Name Type Description Default <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.update_features","title":"update_features","text":"<pre><code>update_features(indices, X, feature_names=None, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Update the features for selected samples on the coreset tree. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>indices</code> <code>Iterable</code> <p>array-like. An array of indices to be updated.</p> required <code>X</code> <code>Iterable</code> <p>array-like. An array of features. Should have the same length as indices.</p> required <code>feature_names</code> <code>Iterable[str]</code> <p>If the quantity of features in X is not equal to the quantity of features in the original coreset, this param should contain list of names of passed features.</p> <code>None</code> <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/lg/#services.coreset_tree.lg.CoresetTreeServiceLG.update_targets","title":"update_targets","text":"<pre><code>update_targets(indices, y, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Update the targets for selected samples on the coreset tree. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>indices</code> <code>Iterable</code> <p>array-like. An array of indices to be updated.</p> required <code>y</code> <code>Iterable</code> <p>array-like. An array of classes/labels. Should have the same length as indices.</p> required <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/lr/","title":"CoresetTreeServiceLR","text":""},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR","title":"CoresetTreeServiceLR","text":"<pre><code>CoresetTreeServiceLR(*, data_manager=None, data_params=None, n_instances=None, max_memory_gb=None, optimized_for, chunk_size=None, coreset_size=None, coreset_params=None, working_directory=None, cache_dir=None, node_train_function=None, node_train_function_params=None, node_metadata_func=None, save_all=None)\n</code></pre> <p>         Bases: <code>CoresetTreeServiceSupervisedMixin</code>, <code>CoresetTreeService</code></p> <p>Subclass of CoresetTreeService for Linear Regression. A service class for creating a coreset tree and working with it. optimized_for is a required parameter defining the main usage of the service: 'training', 'cleaning' or both, optimized_for=['training', 'cleaning']. The service will decide whether to build an actual Coreset Tree or to build a single Coreset over the entire dataset, based on the triplet: n_instances, max_memory_gb and the 'number of features' (deduced from the dataset). The chunk_size and coreset_size will be deduced based on the above triplet too. In case chunk_size and coreset_size are provided, they will override all above mentioned parameters (less recommended).</p> <p>Parameters:</p> Name Type Description Default <code>data_manager</code> <code>DataManagerT</code> <p>DataManagerBase subclass, optional. The class used to interact with the provided data and store it locally. By default, only the sampled data is stored in HDF5 files format.</p> <code>None</code> <code>data_params</code> <code>Union[DataParams, dict]</code> <p>DataParams, optional. Preprocessing information.</p> <p>For Example: data_params = {     'target': {'name': 'interest_rate'},     'index': {'name': 'index_column'} }</p> <code>None</code> <code>n_instances</code> <code>int</code> <p>int. The total number of instances that are going to be processed (can be an estimation). This parameter is required and the only one from the above mentioned quadruplet, which isn't deduced from the data.</p> <code>None</code> <code>max_memory_gb</code> <code>int</code> <p>int, optional. The maximum memory in GB that should be used. When not provided, the server's total memory is used. In any case only 80% of the provided memory or the server's total memory is considered.</p> <code>None</code> <code>optimized_for</code> <code>Union[list, str]</code> <p>str or list Either 'training', 'cleaning' or or both ['training', 'cleaning']. The main usage of the service.</p> required <code>chunk_size</code> <code>Union[dict, int]</code> <p>int, optional. The number of instances to be used when creating a coreset node in the tree. When defined, it will override the parameters of optimized_for, n_instances, n_classes and max_memory_gb. chunk_size=0:  Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>coreset_size</code> <code>Union[int, dict]</code> <p>int, optional. Represents the coreset size of each node in the coreset tree. The coreset is constructed by sampling data instances from the dataset based on their calculated importance. Since each instance may be sampled more than once, in practice, the actual size of the coreset is mostly smaller than coreset_size.</p> <code>None</code> <code>coreset_params</code> <code>Union[CoresetParams, dict]</code> <p>CoresetParams or dict, optional. Coreset algorithm specific parameters.</p> <code>None</code> <code>node_train_function</code> <code>Callable[[np.ndarray, np.ndarray, np.ndarray], Any]</code> <p>Callable, optional. method for training model at tree node level.</p> <code>None</code> <code>node_train_function_params</code> <code>dict</code> <p>dict, optional. kwargs to be used when calling node_train_function.</p> <code>None</code> <code>node_metadata_func</code> <code>Callable[[Tuple[np.ndarray], np.ndarray, Union[list, None]], Union[list, dict, None]]</code> <p>callable, optional. A method for storing user meta data on each node.</p> <code>None</code> <code>working_directory</code> <code>Union[str, os.PathLike]</code> <p>str, path, optional. Local directory where intermediate data is stored.</p> <code>None</code> <code>cache_dir</code> <code>Union[str, os.PathLike]</code> <p>str, path, optional. For internal use when loading a saved service.</p> <code>None</code> <code>save_all</code> <code>bool</code> <p>bool, optional. When set to True, the entire dataset would be saved and not only selected samples. When optimized_for='cleaning' the default is False. When optimized_for='training' the default is True. When both are set the default is True.</p> <code>None</code>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Mask for testing purposes</p>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.tree","title":"tree  <code>property</code>","text":"<pre><code>tree\n</code></pre> <p>Mask for testing purposes Will return the training tree if exists, otherwise the first tree in the trees dict</p>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.build","title":"build","text":"<pre><code>build(X, y, indices=None, props=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Create a coreset tree from the parameters X, y, indices and props (properties). build functions may be called only once. To add more data to the coreset tree use one of the partial_build functions. All features must be numeric and there should be no missing values.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>array like or iterator of arrays like. An array or an iterator of features. All features must be numeric and there should be no missing values.</p> required <code>y</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like. An array or an iterator of targets.</p> required <code>indices</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator with indices of X.</p> <code>None</code> <code>props</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator of properties. Properties, won\u2019t be used to compute the Coreset or train the model, but it is possible to filter_out_samples on them or to pass them in the select_from_function of get_cleaning_samples.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0:  Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False. False (default) - input data might be updated as result a consequence action like update_targets or update_features True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.build_from_df","title":"build_from_df","text":"<pre><code>build_from_df(datasets, target_datasets=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Create a coreset tree from pandas DataFrame(s). build functions may be called only once. To add more data to the coreset tree use one of the partial_build functions. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>datasets</code> <code>Union[Iterator[pd.DataFrame], pd.DataFrame]</code> <p>pandas DataFrame or a DataFrame iterator. Data includes features, may include labels and may include indices.</p> required <code>target_datasets</code> <code>Union[Iterator[Union[pd.DataFrame, pd.Series]], pd.DataFrame, pd.Series]</code> <p>pandas DataFrame or a DataFrame iterator, optional. Use when data is split to features and target. Should include only one column.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0:  Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False. False (default) - Input data might be updated as result of functions such as update_targets or update_features. True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.build_from_file","title":"build_from_file","text":"<pre><code>build_from_file(file_path, target_file_path=None, *, reader_f=pd.read_csv, reader_kwargs=None, reader_chunk_size_param_name=None, chunk_size=None, chunk_by=None)\n</code></pre> <p>Create a coreset tree based on data taken from local storage. build functions may be called only once. To add more data to the coreset tree use one of the partial_build functions. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories. Path(s) to the place where data is stored. Data includes features, may include targets and may include indices.</p> required <code>target_file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories, optional. Use when the dataset files are split to features and target. Each file should include only one column.</p> <code>None</code> <code>reader_f</code> <code>Callable</code> <p>pandas like read method, optional, default pandas read_csv. For example, to read excel files use pandas read_excel.</p> <code>pd.read_csv</code> <code>reader_kwargs</code> <code>dict</code> <p>dict, optional. Keyword arguments used when calling reader_f method.</p> <code>None</code> <code>reader_chunk_size_param_name</code> <code>str</code> <p>str, optional. reader_f input parameter name for reading file in chunks. When not provided we'll try to figure it out our self. Based on the data, we decide on the optimal chunk size to read and use this parameter as input when calling reader_f. Use \"ignore\" to skip the automatic chunk reading logic.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0:  Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.filter_out_samples","title":"filter_out_samples","text":"<pre><code>filter_out_samples(filter_function, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Remove samples from the coreset tree, based on the provided filter function. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>filter_function</code> <code>Callable[[Iterable, Iterable, Union[Iterable, None], Union[Iterable, None]], Iterable[Any]]</code> <p>function, optional. A function that returns a list of indices to be removed from the tree. The function should accept 4 parameters as input: indices, X, y, props and return a list(iterator) of indices to be removed from the coreset tree. For example, in order to remove all instances with a target equal to 6, use the following function: filter_function = lambda indices, X, y, props : indices[y = 6].</p> required <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.fit","title":"fit","text":"<pre><code>fit(level=0, model=None, **model_params)\n</code></pre> <p>Fit a model on the coreset tree. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>Defines the depth level of the tree from which the coreset is extracted. Level 0 returns the coreset from the head of the tree with around coreset_size samples. Level 1 returns the coreset from the level below the head of the tree with around twice of the samples compared to level 0, etc. If the passed level is greater than the maximal level of the tree, the maximal available level is used.</p> <code>0</code> <code>model</code> <code>Any</code> <p>A Scikit-learn compatible model instance, optional. When provided, model_params are not relevant. Default: instantiate the service model class using input model_params.</p> <code>None</code> <code>model_params</code> <p>Model hyperparameters kwargs. Input when instantiating default model class.</p> <code>{}</code> <p>Returns:</p> Type Description <p>Fitted estimator.</p>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.get_cleaning_samples","title":"get_cleaning_samples","text":"<pre><code>get_cleaning_samples(size=None, ignore_indices=None, select_from_indices=None, select_from_function=None, ignore_seen_samples=True)\n</code></pre> <p>Returns indices of samples in descending order of importance. Useful for identifying mislabeled instances and other anomalies in the data. size must be provided. Function must be called after build. This function is only applicable in case the coreset tree was optimized_for 'cleaning'. This function is not for retrieving the coreset (use get_coreset in this case).</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>required, optional. Number of samples to return.</p> <code>None</code> <code>ignore_indices</code> <code>Iterable</code> <p>array-like, optional. An array of indices to ignore when selecting important samples.</p> <code>None</code> <code>select_from_indices</code> <code>Iterable</code> <p>array-like, optional.  An array of indices to consider when selecting important samples.</p> <code>None</code> <code>select_from_function</code> <code>Callable[[Iterable, Iterable, Union[Iterable, None], Union[Iterable, None]], Iterable[Any]]</code> <p>function, optional.  Pass a function in order to limit the selection of the important samples accordingly.  The function should accept 4 parameters as input: indices, X, y, props.  and return a list(iterator) of the desired indices.</p> <code>None</code> <code>ignore_seen_samples</code> <code>bool</code> <p>bool, optional, default True.  Exclude already seen samples and set the seen flag on any indices returned by the function.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Dict</code> <code>Union[ValueError, dict]</code> <p>indices: array-like[int].     Important samples indices. X: array-like[int].     X array. y: array-like[int].     y array. importance: array-like[float].     The importance property. Instances that receive a high Importance in the Coreset computation,     require attention as they usually indicate a labeling error,     anomaly, out-of-distribution problem or other data-related issue.</p>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.get_coreset","title":"get_coreset","text":"<pre><code>get_coreset(level=0, as_orig=False, with_index=False)\n</code></pre> <p>Get tree's coreset data either in a processed format or in the original format. Use the level parameter to control the level of the tree from which samples will be returned. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>int, optional, default 0. Defines the depth level of the tree from which the coreset is extracted. Level 0 returns the coreset from the head of the tree with around coreset_size samples. Level 1 returns the coreset from the level below the head of the tree with around twice of the samples compared to level 0, etc. If the passed level is greater than the maximal level of the tree, the maximal available level is used.</p> <code>0</code> <code>as_orig</code> <code>bool</code> <p>boolean, optional, default False. Should the data be returned in its original format or as a tuple of indices, X, and optionally y. True: data is returned as a pandas DataFrame. False: return a tuple of (indices, X, y) if target was used and (indices, X) when there is no target.</p> <code>False</code> <code>with_index</code> <code>bool</code> <p>boolean, optional, default False. Relevant only when as_orig=True. Should the returned data include the index column.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Dict</code> <code>dict</code> <p>data: numpy arrays tuple (indices, X, optional y) as_orig=False or as a pandas DataFrame when as_orig=True. w: A numpy array of sample weights. n_represents: number of instances represented by the coreset.</p>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.get_max_level","title":"get_max_level","text":"<pre><code>get_max_level()\n</code></pre> <p>Return the maximal level of the coreset tree. Level 0 is the head of the tree. Level 1 is the level below the head of the tree, etc.</p>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.holdout_validate","title":"holdout_validate","text":"<pre><code>holdout_validate(level=None, validation_size=0.2, model=None, scoring=None, return_model=False, verbose=0, **model_params)\n</code></pre> <p>Method for hold-out validation on the coreset tree. The test set is always the last part of the dataset.</p>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.holdout_validate--parameters","title":"Parameters","text":"int, optional. <p>The level of the tree on which the training and validation will be performed. If None, the best level will be selected. Default: None</p> float, optional. <p>The percentage of the dataset that will be used for testing the model. Default: 0.2</p> A Scikit-learn compatible model instance, optional. <p>When provided, model_params are not relevant. The model class needs to implement the usual scikit-learn interface. Default: instantiate the service model class using input model_params.</p> callable or string, optional. <p>If it is a callable object, it must return a scalar score. The signature of the call is (model, X, y), where model is the ML model to be evaluated, X is the data and y is the ground truth labeling. For example, it can be produced using sklearn.metrics.make_scorer (https://scikit-learn.org/stable/modules/generated/sklearn.metrics.make_scorer.html). If it is a string, it must be a valid name of a Scikit-learn scoring method (see https://scikit-learn.org/stable/modules/model_evaluation.html) If None, the default scorer of the current model is used. Default: None</p> bool, optional. <p>If True, the trained model is also returned. Default: False</p> int, optional. <p>Controls the verbosity: the higher, the more messages.     &gt;=1 : the training and validation time is displayed;     &gt;=2 : the validation score is also displayed;     &gt;=3 : starting time of the computation is also displayed. Default: 0</p> kwargs, optional. <p>The hyper-parameters of the model. If not provided, the default values are used.</p>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.holdout_validate--returns","title":"Returns","text":"<pre><code>The validation score.\nIf return_model=True, the trained model is also returned.\n</code></pre>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.is_dirty","title":"is_dirty","text":"<pre><code>is_dirty()\n</code></pre> <p>Returns:</p> Type Description <code>bool</code> <p>Indicates whether the coreset tree has nodes marked as dirty, meaning they were affected by any of the methods: remove_samples, update_targets, update_features or filter_out_samples, when they were called with force_do_nothing.</p>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.load","title":"load  <code>classmethod</code>","text":"<pre><code>load(dir_path, name=None, *, data_manager=None, load_buffer=True, working_directory=None)\n</code></pre> <p>Restore a service object from a local directory.</p> <p>Parameters:</p> Name Type Description Default <code>dir_path</code> <code>Union[str, os.PathLike]</code> <p>str, path. Local directory where service data is stored.</p> required <code>name</code> <code>str</code> <p>string, optional, default service class name (lower case). The name prefix of the subdirectory to load. When several subdirectories having the same name prefix are found, the last one, ordered by name, is selected. For example when saving with override=False, the chosen subdirectory is the last saved.</p> <code>None</code> <code>data_manager</code> <code>DataManagerT</code> <p>DataManagerBase subclass, optional. When specified, input data manger will be used instead of restoring it from the saved configuration.</p> <code>None</code> <code>load_buffer</code> <code>bool</code> <p>boolean, optional, default True. If set, load saved buffer (a partial node of the tree) from disk and add it to the tree.</p> <code>True</code> <code>working_directory</code> <code>Union[str, os.PathLike]</code> <p>str, path, optional, default use working_directory from saved configuration. Local directory where intermediate data is stored.</p> <code>None</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>CoresetTreeService object</p>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.partial_build","title":"partial_build","text":"<pre><code>partial_build(X, y, indices=None, props=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Add new samples to a coreset tree from parameters X, y, indices and props (properties). All features must be numeric and there should be no missing values.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>array like or iterator of arrays like. An array or an iterator of features. All features must be numeric and there should be no missing values.</p> required <code>y</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like. An array or an iterator of targets.</p> required <code>indices</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator with indices of X.</p> <code>None</code> <code>props</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator of properties. Properties, won\u2019t be used to compute the Coreset or train the model, but it is possible to filter_out_samples on them or to pass them in the select_from_function of get_cleaning_samples.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0: Nodes are created based on input chunks.</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False. False (default) - input data might be updated as result a consequence action like update_targets or update_features. True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.partial_build_from_df","title":"partial_build_from_df","text":"<pre><code>partial_build_from_df(datasets, target_datasets=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Add new samples to a coreset tree based on the pandas DataFrame iterator. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>datasets</code> <code>Union[Iterator[pd.DataFrame], pd.DataFrame]</code> <p>pandas DataFrame or a DataFrame iterator. Data includes features, may include targets and may include indices.</p> required <code>target_datasets</code> <code>Union[Iterator[pd.DataFrame], pd.DataFrame]</code> <p>pandas DataFrame or a DataFrame iterator, optional. Use when data is split to features and target. Should include only one column.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional, default previous used chunk_size. The number of instances used when creating a coreset node in the tree. chunk_size=0: Nodes are created based on input chunks.</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False. False (default) - Input data might be updated as result of functions such as update_targets or update_features. True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.partial_build_from_file","title":"partial_build_from_file","text":"<pre><code>partial_build_from_file(file_path, target_file_path=None, *, reader_f=pd.read_csv, reader_kwargs=None, reader_chunk_size_param_name=None, chunk_size=None, chunk_by=None)\n</code></pre> <p>Add new samples to a coreset tree based on data taken from local storage. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories. Path(s) to the place where data is stored. Data includes features, may include targets and may include indices.</p> required <code>target_file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories, optional. Use when files are split to features and target. Each file should include only one column.</p> <code>None</code> <code>reader_f</code> <code>Callable</code> <p>pandas like read method, optional, default pandas read_csv. For example, to read excel files use pandas read_excel.</p> <code>pd.read_csv</code> <code>reader_kwargs</code> <code>dict</code> <p>dict, optional. Keyword arguments used when calling reader_f method.</p> <code>None</code> <code>reader_chunk_size_param_name</code> <code>str</code> <p>str, optional. reader_f input parameter name for reading file in chunks. When not provided we'll try to figure it out our self. Based on the data, we decide on the optimal chunk size to read and use this parameter as input when calling reader_f. Use \"ignore\" to skip the automatic chunk reading logic.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional, default previous used chunk_size. The number of instances used when creating a coreset node in the tree. chunk_size=0: Nodes are created based on input chunks.</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.plot","title":"plot","text":"<pre><code>plot(dir_path=None, selected_trees=None)\n</code></pre> <p>Produce a tree graph plot and save figure as a local png file.</p> <p>Parameters:</p> Name Type Description Default <code>dir_path</code> <code>Union[str, os.PathLike]</code> <p>string or PathLike. Path to save the plot figure in; if not provided, or if isn't valid/doesn't exist, the figure will be saved in the current directory (from which this method is called).</p> <code>None</code> <code>selected_trees</code> <code>dict</code> <p>dict, optional. A dictionary containing the names of the image file(s) to be generated.</p> <code>None</code> <p>Returns:</p> Type Description <code>pathlib.Path</code> <p>Image file path</p>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.predict","title":"predict","text":"<pre><code>predict(X)\n</code></pre> <p>Run prediction on the trained model. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>An array of features.</p> required <p>Returns:</p> Type Description <p>Model prediction results.</p>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.predict_proba","title":"predict_proba","text":"<pre><code>predict_proba(X)\n</code></pre> <p>Run prediction on the trained model. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>An array of features.</p> required <p>Returns:</p> Type Description <p>Returns the probability of the sample for each class in the model.</p>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.print","title":"print","text":"<pre><code>print(selected_tree=None)\n</code></pre> <p>Print the tree's string representation.</p> <p>Parameters:</p> Name Type Description Default <code>selected_trees</code> <p>string or list. Which tree(s) to print. Defaults to printing all.</p> required"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.remove_samples","title":"remove_samples","text":"<pre><code>remove_samples(indices, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Remove samples from the coreset tree. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>indices</code> <code>Iterable</code> <p>array-like. An array of indices to be removed from the coreset tree.</p> required <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.save","title":"save","text":"<pre><code>save(dir_path=None, name=None, save_buffer=True, override=False, allow_pickle=True)\n</code></pre> <p>Save service configuration and relevant data to a local directory. Use this method when the service needs to be restored.</p> <p>Parameters:</p> Name Type Description Default <code>dir_path</code> <code>Union[str, os.PathLike]</code> <p>string or PathLike, optional, default self.working_directory. A local directory for saving service's files.</p> <code>None</code> <code>name</code> <code>str</code> <p>string, optional, default service class name (lower case). Name of the subdirectory where the data will be stored.</p> <code>None</code> <code>save_buffer</code> <code>bool</code> <p>boolean, default True. Save also the data in the buffer (a partial node of the tree) along with the rest of the saved data.</p> <code>True</code> <code>override</code> <code>bool</code> <p>bool, optional, default False. False: add a timestamp suffix so each save won\u2019t override the previous ones. True: The existing subdirectory with the provided name is overridden.</p> <code>False</code> <code>allow_pickle</code> <code>bool</code> <p>bool, optional, default True. True: Saves the Coreset tree in pickle format (much faster). False: Saves the Coreset tree in JSON format.</p> <code>True</code> <p>Returns:</p> Type Description <code>pathlib.Path</code> <p>Save directory path.</p>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.save_coreset","title":"save_coreset","text":"<pre><code>save_coreset(file_path, level=0, as_orig=False, with_index=False)\n</code></pre> <p>Get coreset from the tree and save to a file along with coreset weights. Use the level parameter to control the level of the tree from which samples will be returned. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[str, os.PathLike]</code> <p>string or PathLike. Local file path to store the coreset.</p> required <code>level</code> <code>int</code> <p>int, optional, default 0. Defines the depth level of the tree from which the coreset is extracted. Level 0 returns the coreset from the head of the tree with around coreset_size samples. Level 1 returns the coreset from the level below the head of the tree with around twice of the samples compared to level 0, etc. If the passed level is greater than the maximal level of the tree, the maximal available level is used.</p> <code>0</code> <code>as_orig</code> <code>bool</code> <p>boolean, optional, default False. True: save in the original format. False: save in a processed format (indices, X, y, weight).</p> <code>False</code> <code>with_index</code> <code>bool</code> <p>boolean, optional, default False. Relevant only when as_orig=True. Save also index column.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.set_seen_indication","title":"set_seen_indication","text":"<pre><code>set_seen_indication(seen_flag=True, indices=None)\n</code></pre> <p>Set samples as 'seen' or 'unseen'. Not providing an indices list defaults to setting the flag on all samples. This function is only applicable in case the coreset tree was optimized_for 'cleaning'.</p> <p>Parameters:</p> Name Type Description Default <code>seen_flag</code> <code>bool</code> <p>bool, optional, default True. Set 'seen' or 'unseen' flag</p> <code>True</code> <code>indices</code> <code>Iterable</code> <p>array like, optional. Set flag only for the provided list of indices. Defaults to all indices.</p> <code>None</code>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.update_dirty","title":"update_dirty","text":"<pre><code>update_dirty(force_resample_all=None, force_sensitivity_recalc=None)\n</code></pre> <p>Calculate the sensitivity and resample the nodes that were marked as dirty, meaning they were affected by any of the methods: remove_samples, update_targets, update_features or filter_out_samples, when they were called with force_do_nothing.</p> <p>Parameters:</p> Name Type Description Default <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.update_features","title":"update_features","text":"<pre><code>update_features(indices, X, feature_names=None, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Update the features for selected samples on the coreset tree. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>indices</code> <code>Iterable</code> <p>array-like. An array of indices to be updated.</p> required <code>X</code> <code>Iterable</code> <p>array-like. An array of features. Should have the same length as indices.</p> required <code>feature_names</code> <code>Iterable[str]</code> <p>If the quantity of features in X is not equal to the quantity of features in the original coreset, this param should contain list of names of passed features.</p> <code>None</code> <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/lr/#services.coreset_tree.lr.CoresetTreeServiceLR.update_targets","title":"update_targets","text":"<pre><code>update_targets(indices, y, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Update the targets for selected samples on the coreset tree. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>indices</code> <code>Iterable</code> <p>array-like. An array of indices to be updated.</p> required <code>y</code> <code>Iterable</code> <p>array-like. An array of classes/labels. Should have the same length as indices.</p> required <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/pca/","title":"CoresetTreeServicePCA","text":""},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA","title":"CoresetTreeServicePCA","text":"<pre><code>CoresetTreeServicePCA(*, data_manager=None, data_params=None, n_instances=None, max_memory_gb=None, optimized_for, chunk_size=None, coreset_size=None, coreset_params=None, working_directory=None, cache_dir=None, node_train_function=None, node_train_function_params=None, node_metadata_func=None, save_all=None)\n</code></pre> <p>         Bases: <code>CoresetTreeServiceUnsupervisedMixin</code>, <code>CoresetTreeService</code></p> <p>Subclass of CoresetTreeService for PCA. A service class for creating a coreset tree and working with it. optimized_for is a required parameter defining the main usage of the service: 'training', 'cleaning' or both, optimized_for=['training', 'cleaning']. The service will decide whether to build an actual Coreset Tree or to build a single Coreset over the entire dataset, based on the triplet: n_instances, n_classes, max_memory_gb and the 'number of features' (deduced from the dataset). The chunk_size and coreset_size will be deduced based on the above triplet too. In case chunk_size and coreset_size are provided, they will override all above mentioned parameters (less recommended).</p> <p>When building the Coreset, samples are selected and weights are assigned to them, therefore it is important to use functions that support the receipt of sample_weight. Sklearn's PCA implementation does not support the receipt of sample_weight, therefore, it is highly recommended to use the built-in fit or fit_transform functions of the CoresetTreeServicePCA class as they were extended to receive sample_weight.</p> <p>Parameters:</p> Name Type Description Default <code>data_manager</code> <code>DataManagerT</code> <p>DataManagerBase subclass, optional. The class used to interact with the provided data and store it locally. By default, only the sampled data is stored in HDF5 files format.</p> <code>None</code> <code>data_params</code> <code>Union[DataParams, dict]</code> <p>DataParams, optional. Preprocessing information.</p> <p>For Example: data_params = {     'index': {'name': 'index_column'} }</p> <code>None</code> <code>n_instances</code> <code>int</code> <p>int. The total number of instances that are going to be processed (can be an estimation). This parameter is required and the only one from the above mentioned quadruplet, which isn't deduced from the data.</p> <code>None</code> <code>max_memory_gb</code> <code>int</code> <p>int, optional. The maximum memory in GB that should be used. When not provided, the server's total memory is used. In any case only 80% of the provided memory or the server's total memory is considered.</p> <code>None</code> <code>optimized_for</code> <code>Union[list, str]</code> <p>str or list Either 'training', 'cleaning' or or both ['training', 'cleaning']. The main usage of the service.</p> required <code>chunk_size</code> <code>Union[dict, int]</code> <p>int, optional. The number of instances to be used when creating a coreset node in the tree. When defined, it will override the parameters of optimized_for, n_instances, n_classes and max_memory_gb. chunk_size=0:  Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>coreset_size</code> <code>Union[int, dict]</code> <p>int, optional. Represents the coreset size of each node in the coreset tree. The coreset is constructed by sampling data instances from the dataset based on their calculated importance. Since each instance may be sampled more than once, in practice, the actual size of the coreset is mostly smaller than coreset_size.</p> <code>None</code> <code>coreset_params</code> <code>Union[CoresetParams, dict]</code> <p>CoresetParams or dict, optional. Coreset algorithm specific parameters.</p> <code>None</code> <code>node_train_function</code> <code>Callable[[np.ndarray, np.ndarray, np.ndarray], Any]</code> <p>Callable, optional. method for training model at tree node level.</p> <code>None</code> <code>node_train_function_params</code> <code>dict</code> <p>dict, optional. kwargs to be used when calling node_train_function.</p> <code>None</code> <code>node_metadata_func</code> <code>Callable[[Tuple[np.ndarray], np.ndarray, Union[list, None]], Union[list, dict, None]]</code> <p>callable, optional. A method for storing user meta data on each node.</p> <code>None</code> <code>working_directory</code> <code>Union[str, os.PathLike]</code> <p>str, path, optional. Local directory where intermediate data is stored.</p> <code>None</code> <code>cache_dir</code> <code>Union[str, os.PathLike]</code> <p>str, path, optional. For internal use when loading a saved service.</p> <code>None</code> <code>save_all</code> <code>bool</code> <p>bool, optional. When set to True, the entire dataset would be saved and not only selected samples. When optimized_for='cleaning' the default is False. When optimized_for='training' the default is True. When both are set the default is True.</p> <code>None</code>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Mask for testing purposes</p>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.tree","title":"tree  <code>property</code>","text":"<pre><code>tree\n</code></pre> <p>Mask for testing purposes Will return the training tree if exists, otherwise the first tree in the trees dict</p>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.build","title":"build","text":"<pre><code>build(X, y=None, indices=None, props=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Create a coreset tree from the parameters X, y, indices and props (properties). build functions may be called only once. To add more data to the coreset tree use one of the partial_build functions. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>array like or iterator of arrays like. An array or an iterator of features. All features must be numeric and there should be no missing values.</p> required <code>y</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator of targets. The target will be ignored when the Coreset is built.</p> <code>None</code> <code>indices</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator with indices of X.</p> <code>None</code> <code>props</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator of properties. Properties, won\u2019t be used to compute the Coreset or train the model, but it is possible to filter_out_samples on them or to pass them in the select_from_function of get_cleaning_samples.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0: Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False. False (default) - Input data might be updated as result of functions such as update_targets or update_features. True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.build_from_df","title":"build_from_df","text":"<pre><code>build_from_df(datasets, target_datasets=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Create a coreset tree from pandas DataFrame(s). build functions may be called only once. To add more data to the coreset tree use one of the partial_build functions. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>datasets</code> <code>Union[Iterator[pd.DataFrame], pd.DataFrame]</code> <p>pandas DataFrame or a DataFrame iterator. Data includes features, may include labels and may include indices.</p> required <code>target_datasets</code> <code>Union[Iterator[Union[pd.DataFrame, pd.Series]], pd.DataFrame, pd.Series]</code> <p>pandas DataFrame or a DataFrame iterator, optional. Use when data is split to features and target. Should include only one column.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0:  Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False. False (default) - Input data might be updated as result of functions such as update_targets or update_features. True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.build_from_file","title":"build_from_file","text":"<pre><code>build_from_file(file_path, target_file_path=None, *, reader_f=pd.read_csv, reader_kwargs=None, reader_chunk_size_param_name=None, chunk_size=None, chunk_by=None)\n</code></pre> <p>Create a coreset tree based on data taken from local storage. build functions may be called only once. To add more data to the coreset tree use one of the partial_build functions. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories. Path(s) to the place where data is stored. Data includes features, may include targets and may include indices.</p> required <code>target_file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories, optional. Use when the dataset files are split to features and target. Each file should include only one column.</p> <code>None</code> <code>reader_f</code> <code>Callable</code> <p>pandas like read method, optional, default pandas read_csv. For example, to read excel files use pandas read_excel.</p> <code>pd.read_csv</code> <code>reader_kwargs</code> <code>dict</code> <p>dict, optional. Keyword arguments used when calling reader_f method.</p> <code>None</code> <code>reader_chunk_size_param_name</code> <code>str</code> <p>str, optional. reader_f input parameter name for reading file in chunks. When not provided we'll try to figure it out our self. Based on the data, we decide on the optimal chunk size to read and use this parameter as input when calling reader_f. Use \"ignore\" to skip the automatic chunk reading logic.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0:  Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.filter_out_samples","title":"filter_out_samples","text":"<pre><code>filter_out_samples(filter_function, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Remove samples from the coreset tree, based on the provided filter function. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>filter_function</code> <code>Callable[[Iterable, Iterable, Union[Iterable, None], Union[Iterable, None]], Iterable[Any]]</code> <p>function, optional. A function that returns a list of indices to be removed from the tree. The function should accept 4 parameters as input: indices, X, y, props and return a list(iterator) of indices to be removed from the coreset tree. For example, in order to remove all instances with a target equal to 6, use the following function: filter_function = lambda indices, X, y, props : indices[y = 6].</p> required <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.fit","title":"fit","text":"<pre><code>fit(level=0, model=None, **model_params)\n</code></pre> <p>Fit a model on the coreset tree. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>Defines the depth level of the tree from which the coreset is extracted. Level 0 returns the coreset from the head of the tree with around coreset_size samples. Level 1 returns the coreset from the level below the head of the tree with around twice of the samples compared to level 0, etc. If the passed level is greater than the maximal level of the tree, the maximal available level is used.</p> <code>0</code> <code>model</code> <code>Any</code> <p>A Scikit-learn compatible model instance, optional. When provided, model_params are not relevant. Default: instantiate the service model class using input model_params.</p> <code>None</code> <code>model_params</code> <p>Model hyperparameters kwargs. Input when instantiating default model class.</p> <code>{}</code> <p>Returns:</p> Type Description <p>Fitted estimator.</p>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.get_cleaning_samples","title":"get_cleaning_samples","text":"<pre><code>get_cleaning_samples(size=None, ignore_indices=None, select_from_indices=None, select_from_function=None, ignore_seen_samples=True)\n</code></pre> <p>Returns indices of samples in descending order of importance. Useful for identifying mislabeled instances and other anomalies in the data. size must be provided. Function must be called after build. This function is only applicable in case the coreset tree was optimized_for 'cleaning'. This function is not for retrieving the coreset (use get_coreset in this case).</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>required, optional. Number of samples to return.</p> <code>None</code> <code>ignore_indices</code> <code>Iterable</code> <p>array-like, optional. An array of indices to ignore when selecting important samples.</p> <code>None</code> <code>select_from_indices</code> <code>Iterable</code> <p>array-like, optional.  An array of indices to consider when selecting important samples.</p> <code>None</code> <code>select_from_function</code> <code>Callable[[Iterable, Iterable, Union[Iterable, None], Union[Iterable, None]], Iterable[Any]]</code> <p>function, optional.  Pass a function in order to limit the selection of the important samples accordingly.  The function should accept 4 parameters as input: indices, X, y, props.  and return a list(iterator) of the desired indices.</p> <code>None</code> <code>ignore_seen_samples</code> <code>bool</code> <p>bool, optional, default True.  Exclude already seen samples and set the seen flag on any indices returned by the function.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Dict</code> <code>Union[ValueError, dict]</code> <p>indices: array-like[int].     Important samples indices. X: array-like[int].     X array. y: array-like[int].     y array. importance: array-like[float].     The importance property. Instances that receive a high Importance in the Coreset computation,     require attention as they usually indicate a labeling error,     anomaly, out-of-distribution problem or other data-related issue.</p>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.get_coreset","title":"get_coreset","text":"<pre><code>get_coreset(level=0, as_orig=False, with_index=False)\n</code></pre> <p>Get tree's coreset data either in a processed format or in the original format. Use the level parameter to control the level of the tree from which samples will be returned. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>int, optional, default 0. Defines the depth level of the tree from which the coreset is extracted. Level 0 returns the coreset from the head of the tree with around coreset_size samples. Level 1 returns the coreset from the level below the head of the tree with around twice of the samples compared to level 0, etc. If the passed level is greater than the maximal level of the tree, the maximal available level is used.</p> <code>0</code> <code>as_orig</code> <code>bool</code> <p>boolean, optional, default False. Should the data be returned in its original format or as a tuple of indices, X, and optionally y. True: data is returned as a pandas DataFrame. False: return a tuple of (indices, X, y) if target was used and (indices, X) when there is no target.</p> <code>False</code> <code>with_index</code> <code>bool</code> <p>boolean, optional, default False. Relevant only when as_orig=True. Should the returned data include the index column.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Dict</code> <code>dict</code> <p>data: numpy arrays tuple (indices, X, optional y) as_orig=False or as a pandas DataFrame when as_orig=True. w: A numpy array of sample weights. n_represents: number of instances represented by the coreset.</p>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.get_max_level","title":"get_max_level","text":"<pre><code>get_max_level()\n</code></pre> <p>Return the maximal level of the coreset tree. Level 0 is the head of the tree. Level 1 is the level below the head of the tree, etc.</p>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.holdout_validate","title":"holdout_validate","text":"<pre><code>holdout_validate(level=None, validation_size=0.2, model=None, scoring=None, return_model=False, verbose=0, **model_params)\n</code></pre> <p>Method for hold-out validation on the coreset tree. The test set is always the last part of the dataset.</p>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.holdout_validate--parameters","title":"Parameters","text":"int, optional. <p>The level of the tree on which the training and validation will be performed. If None, the best level will be selected. Default: None</p> float, optional. <p>The percentage of the dataset that will be used for testing the model. Default: 0.2</p> A Scikit-learn compatible model instance, optional. <p>When provided, model_params are not relevant. The model class needs to implement the usual scikit-learn interface. Default: instantiate the service model class using input model_params.</p> callable or string, optional. <p>If it is a callable object, it must return a scalar score. The signature of the call is (model, X, y), where model is the ML model to be evaluated, X is the data and y is the ground truth labeling. For example, it can be produced using sklearn.metrics.make_scorer (https://scikit-learn.org/stable/modules/generated/sklearn.metrics.make_scorer.html). If it is a string, it must be a valid name of a Scikit-learn scoring method (see https://scikit-learn.org/stable/modules/model_evaluation.html) If None, the default scorer of the current model is used. Default: None</p> bool, optional. <p>If True, the trained model is also returned. Default: False</p> int, optional. <p>Controls the verbosity: the higher, the more messages.     &gt;=1 : the training and validation time is displayed;     &gt;=2 : the validation score is also displayed;     &gt;=3 : starting time of the computation is also displayed. Default: 0</p> kwargs, optional. <p>The hyper-parameters of the model. If not provided, the default values are used.</p>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.holdout_validate--returns","title":"Returns","text":"<pre><code>The validation score.\nIf return_model=True, the trained model is also returned.\n</code></pre>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.is_dirty","title":"is_dirty","text":"<pre><code>is_dirty()\n</code></pre> <p>Returns:</p> Type Description <code>bool</code> <p>Indicates whether the coreset tree has nodes marked as dirty, meaning they were affected by any of the methods: remove_samples, update_targets, update_features or filter_out_samples, when they were called with force_do_nothing.</p>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.load","title":"load  <code>classmethod</code>","text":"<pre><code>load(dir_path, name=None, *, data_manager=None, load_buffer=True, working_directory=None)\n</code></pre> <p>Restore a service object from a local directory.</p> <p>Parameters:</p> Name Type Description Default <code>dir_path</code> <code>Union[str, os.PathLike]</code> <p>str, path. Local directory where service data is stored.</p> required <code>name</code> <code>str</code> <p>string, optional, default service class name (lower case). The name prefix of the subdirectory to load. When several subdirectories having the same name prefix are found, the last one, ordered by name, is selected. For example when saving with override=False, the chosen subdirectory is the last saved.</p> <code>None</code> <code>data_manager</code> <code>DataManagerT</code> <p>DataManagerBase subclass, optional. When specified, input data manger will be used instead of restoring it from the saved configuration.</p> <code>None</code> <code>load_buffer</code> <code>bool</code> <p>boolean, optional, default True. If set, load saved buffer (a partial node of the tree) from disk and add it to the tree.</p> <code>True</code> <code>working_directory</code> <code>Union[str, os.PathLike]</code> <p>str, path, optional, default use working_directory from saved configuration. Local directory where intermediate data is stored.</p> <code>None</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>CoresetTreeService object</p>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.partial_build","title":"partial_build","text":"<pre><code>partial_build(X, y=None, indices=None, props=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Add new samples to a coreset tree from parameters X, y, indices and props (properties). All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>array like or iterator of arrays like. An array or an iterator of features. All features must be numeric and there should be no missing values.</p> required <code>y</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator of targets. The target will be ignored when the Coreset is built.</p> <code>None</code> <code>indices</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator with indices of X.</p> <code>None</code> <code>props</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator of properties. Properties, won\u2019t be used to compute the Coreset or train the model, but it is possible to filter_out_samples on them or to pass them in the select_from_function of get_cleaning_samples.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0: Nodes are created based on input chunks.</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False False (default) - Input data might be updated as result of functions such as update_targets or update_features. True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.partial_build_from_df","title":"partial_build_from_df","text":"<pre><code>partial_build_from_df(datasets, target_datasets=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Add new samples to a coreset tree based on the pandas DataFrame iterator. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>datasets</code> <code>Union[Iterator[pd.DataFrame], pd.DataFrame]</code> <p>pandas DataFrame or a DataFrame iterator. Data includes features, may include targets and may include indices.</p> required <code>target_datasets</code> <code>Union[Iterator[pd.DataFrame], pd.DataFrame]</code> <p>pandas DataFrame or a DataFrame iterator, optional. Use when data is split to features and target. Should include only one column.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional, default previous used chunk_size. The number of instances used when creating a coreset node in the tree. chunk_size=0: Nodes are created based on input chunks.</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False. False (default) - Input data might be updated as result of functions such as update_targets or update_features. True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.partial_build_from_file","title":"partial_build_from_file","text":"<pre><code>partial_build_from_file(file_path, target_file_path=None, *, reader_f=pd.read_csv, reader_kwargs=None, reader_chunk_size_param_name=None, chunk_size=None, chunk_by=None)\n</code></pre> <p>Add new samples to a coreset tree based on data taken from local storage. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories. Path(s) to the place where data is stored. Data includes features, may include targets and may include indices.</p> required <code>target_file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories, optional. Use when files are split to features and target. Each file should include only one column.</p> <code>None</code> <code>reader_f</code> <code>Callable</code> <p>pandas like read method, optional, default pandas read_csv. For example, to read excel files use pandas read_excel.</p> <code>pd.read_csv</code> <code>reader_kwargs</code> <code>dict</code> <p>dict, optional. Keyword arguments used when calling reader_f method.</p> <code>None</code> <code>reader_chunk_size_param_name</code> <code>str</code> <p>str, optional. reader_f input parameter name for reading file in chunks. When not provided we'll try to figure it out our self. Based on the data, we decide on the optimal chunk size to read and use this parameter as input when calling reader_f. Use \"ignore\" to skip the automatic chunk reading logic.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional, default previous used chunk_size. The number of instances used when creating a coreset node in the tree. chunk_size=0: Nodes are created based on input chunks.</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.plot","title":"plot","text":"<pre><code>plot(dir_path=None, selected_trees=None)\n</code></pre> <p>Produce a tree graph plot and save figure as a local png file.</p> <p>Parameters:</p> Name Type Description Default <code>dir_path</code> <code>Union[str, os.PathLike]</code> <p>string or PathLike. Path to save the plot figure in; if not provided, or if isn't valid/doesn't exist, the figure will be saved in the current directory (from which this method is called).</p> <code>None</code> <code>selected_trees</code> <code>dict</code> <p>dict, optional. A dictionary containing the names of the image file(s) to be generated.</p> <code>None</code> <p>Returns:</p> Type Description <code>pathlib.Path</code> <p>Image file path</p>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.predict","title":"predict","text":"<pre><code>predict(X)\n</code></pre> <p>Run prediction on the trained model. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>An array of features.</p> required <p>Returns:</p> Type Description <p>Model prediction results.</p>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.predict_proba","title":"predict_proba","text":"<pre><code>predict_proba(X)\n</code></pre> <p>Run prediction on the trained model. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>An array of features.</p> required <p>Returns:</p> Type Description <p>Returns the probability of the sample for each class in the model.</p>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.print","title":"print","text":"<pre><code>print(selected_tree=None)\n</code></pre> <p>Print the tree's string representation.</p> <p>Parameters:</p> Name Type Description Default <code>selected_trees</code> <p>string or list. Which tree(s) to print. Defaults to printing all.</p> required"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.remove_samples","title":"remove_samples","text":"<pre><code>remove_samples(indices, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Remove samples from the coreset tree. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>indices</code> <code>Iterable</code> <p>array-like. An array of indices to be removed from the coreset tree.</p> required <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.save","title":"save","text":"<pre><code>save(dir_path=None, name=None, save_buffer=True, override=False, allow_pickle=True)\n</code></pre> <p>Save service configuration and relevant data to a local directory. Use this method when the service needs to be restored.</p> <p>Parameters:</p> Name Type Description Default <code>dir_path</code> <code>Union[str, os.PathLike]</code> <p>string or PathLike, optional, default self.working_directory. A local directory for saving service's files.</p> <code>None</code> <code>name</code> <code>str</code> <p>string, optional, default service class name (lower case). Name of the subdirectory where the data will be stored.</p> <code>None</code> <code>save_buffer</code> <code>bool</code> <p>boolean, default True. Save also the data in the buffer (a partial node of the tree) along with the rest of the saved data.</p> <code>True</code> <code>override</code> <code>bool</code> <p>bool, optional, default False. False: add a timestamp suffix so each save won\u2019t override the previous ones. True: The existing subdirectory with the provided name is overridden.</p> <code>False</code> <code>allow_pickle</code> <code>bool</code> <p>bool, optional, default True. True: Saves the Coreset tree in pickle format (much faster). False: Saves the Coreset tree in JSON format.</p> <code>True</code> <p>Returns:</p> Type Description <code>pathlib.Path</code> <p>Save directory path.</p>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.save_coreset","title":"save_coreset","text":"<pre><code>save_coreset(file_path, level=0, as_orig=False, with_index=False)\n</code></pre> <p>Get coreset from the tree and save to a file along with coreset weights. Use the level parameter to control the level of the tree from which samples will be returned. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[str, os.PathLike]</code> <p>string or PathLike. Local file path to store the coreset.</p> required <code>level</code> <code>int</code> <p>int, optional, default 0. Defines the depth level of the tree from which the coreset is extracted. Level 0 returns the coreset from the head of the tree with around coreset_size samples. Level 1 returns the coreset from the level below the head of the tree with around twice of the samples compared to level 0, etc. If the passed level is greater than the maximal level of the tree, the maximal available level is used.</p> <code>0</code> <code>as_orig</code> <code>bool</code> <p>boolean, optional, default False. True: save in the original format. False: save in a processed format (indices, X, y, weight).</p> <code>False</code> <code>with_index</code> <code>bool</code> <p>boolean, optional, default False. Relevant only when as_orig=True. Save also index column.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.set_seen_indication","title":"set_seen_indication","text":"<pre><code>set_seen_indication(seen_flag=True, indices=None)\n</code></pre> <p>Set samples as 'seen' or 'unseen'. Not providing an indices list defaults to setting the flag on all samples. This function is only applicable in case the coreset tree was optimized_for 'cleaning'.</p> <p>Parameters:</p> Name Type Description Default <code>seen_flag</code> <code>bool</code> <p>bool, optional, default True. Set 'seen' or 'unseen' flag</p> <code>True</code> <code>indices</code> <code>Iterable</code> <p>array like, optional. Set flag only for the provided list of indices. Defaults to all indices.</p> <code>None</code>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.update_dirty","title":"update_dirty","text":"<pre><code>update_dirty(force_resample_all=None, force_sensitivity_recalc=None)\n</code></pre> <p>Calculate the sensitivity and resample the nodes that were marked as dirty, meaning they were affected by any of the methods: remove_samples, update_targets, update_features or filter_out_samples, when they were called with force_do_nothing.</p> <p>Parameters:</p> Name Type Description Default <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.update_features","title":"update_features","text":"<pre><code>update_features(indices, X, feature_names=None, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Update the features for selected samples on the coreset tree. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>indices</code> <code>Iterable</code> <p>array-like. An array of indices to be updated.</p> required <code>X</code> <code>Iterable</code> <p>array-like. An array of features. Should have the same length as indices.</p> required <code>feature_names</code> <code>Iterable[str]</code> <p>If the quantity of features in X is not equal to the quantity of features in the original coreset, this param should contain list of names of passed features.</p> <code>None</code> <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/pca/#services.coreset_tree.pca.CoresetTreeServicePCA.update_targets","title":"update_targets","text":"<pre><code>update_targets(indices, y, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Update the targets for selected samples on the coreset tree. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>indices</code> <code>Iterable</code> <p>array-like. An array of indices to be updated.</p> required <code>y</code> <code>Iterable</code> <p>array-like. An array of classes/labels. Should have the same length as indices.</p> required <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/svd/","title":"CoresetTreeServiceSVD","text":""},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD","title":"CoresetTreeServiceSVD","text":"<pre><code>CoresetTreeServiceSVD(*, data_manager=None, data_params=None, n_instances=None, max_memory_gb=None, n_classes=None, optimized_for=None, chunk_size=None, coreset_size=None, coreset_params=None, sample_all=None, working_directory=None, cache_dir=None, node_train_function=None, node_train_function_params=None, node_metadata_func=None, save_all=None)\n</code></pre> <p>         Bases: <code>CoresetTreeServiceUnsupervisedMixin</code>, <code>CoresetTreeService</code></p> <p>Subclass of CoresetTreeService for SVD. A service class for creating a coreset tree and working with it. optimized_for is a required parameter defining the main usage of the service: 'training', 'cleaning' or both, optimized_for=['training', 'cleaning']. The service will decide whether to build an actual Coreset Tree or to build a single Coreset over the entire dataset, based on the triplet: n_instances, n_classes, max_memory_gb and the 'number of features' (deduced from the dataset). The chunk_size and coreset_size will be deduced based on the above triplet too. In case chunk_size and coreset_size are provided, they will override all above mentioned parameters (less recommended).</p> <p>When building the Coreset, samples are selected and weights are assigned to them, therefore it is important to use functions that support the receipt of sample_weight. Sklearn's SVD implementation does not support the receipt of sample_weight, therefore, it is highly recommended to use the built-in fit function of the CoresetTreeServiceSVD class as it was extended to receive sample_weight.</p> <p>Parameters:</p> Name Type Description Default <code>data_manager</code> <code>DataManagerT</code> <p>DataManagerBase subclass, optional. The class used to interact with the provided data and store it locally. By default, only the sampled data is stored in HDF5 files format.</p> <code>None</code> <code>data_params</code> <code>Union[DataParams, dict]</code> <p>DataParams, optional. Preprocessing information.</p> <p>For Example: data_params = {     'index': {'name': 'index_column'} }</p> <code>None</code> <code>n_instances</code> <code>int</code> <p>int. The total number of instances that are going to be processed (can be an estimation). This parameter is required and the only one from the above mentioned quadruplet, which isn't deduced from the data.</p> <code>None</code> <code>max_memory_gb</code> <code>int</code> <p>int, optional. The maximum memory in GB that should be used. When not provided, the server's total memory is used. In any case only 80% of the provided memory or the server's total memory is considered.</p> <code>None</code> <code>optimized_for</code> <code>Union[list, str]</code> <p>str or list Either 'training', 'cleaning' or or both ['training', 'cleaning']. The main usage of the service.</p> <code>None</code> <code>chunk_size</code> <code>Union[dict, int]</code> <p>int, optional. The number of instances to be used when creating a coreset node in the tree. When defined, it will override the parameters of optimized_for, n_instances, n_classes and max_memory_gb. chunk_size=0:  Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>coreset_size</code> <code>Union[int, dict]</code> <p>int, optional. Represents the coreset size of each node in the coreset tree. The coreset is constructed by sampling data instances from the dataset based on their calculated importance. Since each instance may be sampled more than once, in practice, the actual size of the coreset is mostly smaller than coreset_size.</p> <code>None</code> <code>coreset_params</code> <code>Union[CoresetParams, dict]</code> <p>CoresetParams or dict, optional. Coreset algorithm specific parameters.</p> <code>None</code> <code>node_train_function</code> <code>Callable[[np.ndarray, np.ndarray, np.ndarray], Any]</code> <p>Callable, optional. method for training model at tree node level.</p> <code>None</code> <code>node_train_function_params</code> <code>dict</code> <p>dict, optional. kwargs to be used when calling node_train_function.</p> <code>None</code> <code>node_metadata_func</code> <code>Callable[[Tuple[np.ndarray], np.ndarray, Union[list, None]], Union[list, dict, None]]</code> <p>callable, optional. A method for storing user meta data on each node.</p> <code>None</code> <code>working_directory</code> <code>Union[str, os.PathLike]</code> <p>str, path, optional. Local directory where intermediate data is stored.</p> <code>None</code> <code>cache_dir</code> <code>Union[str, os.PathLike]</code> <p>str, path, optional. For internal use when loading a saved service.</p> <code>None</code> <code>save_all</code> <code>bool</code> <p>bool, optional. When set to True, the entire dataset would be saved and not only selected samples. When optimized_for='cleaning' the default is False. When optimized_for='training' the default is True. When both are set the default is True.</p> <code>None</code>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Mask for testing purposes</p>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.tree","title":"tree  <code>property</code>","text":"<pre><code>tree\n</code></pre> <p>Mask for testing purposes Will return the training tree if exists, otherwise the first tree in the trees dict</p>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.build","title":"build","text":"<pre><code>build(X, y=None, indices=None, props=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Create a coreset tree from the parameters X, y, indices and props (properties). build functions may be called only once. To add more data to the coreset tree use one of the partial_build functions. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>array like or iterator of arrays like. An array or an iterator of features. All features must be numeric and there should be no missing values.</p> required <code>y</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator of targets. The target will be ignored when the Coreset is built.</p> <code>None</code> <code>indices</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator with indices of X.</p> <code>None</code> <code>props</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator of properties. Properties, won\u2019t be used to compute the Coreset or train the model, but it is possible to filter_out_samples on them or to pass them in the select_from_function of get_cleaning_samples.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0: Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False. False (default) - Input data might be updated as result of functions such as update_targets or update_features. True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.build_from_df","title":"build_from_df","text":"<pre><code>build_from_df(datasets, target_datasets=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Create a coreset tree from pandas DataFrame(s). build functions may be called only once. To add more data to the coreset tree use one of the partial_build functions. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>datasets</code> <code>Union[Iterator[pd.DataFrame], pd.DataFrame]</code> <p>pandas DataFrame or a DataFrame iterator. Data includes features, may include labels and may include indices.</p> required <code>target_datasets</code> <code>Union[Iterator[Union[pd.DataFrame, pd.Series]], pd.DataFrame, pd.Series]</code> <p>pandas DataFrame or a DataFrame iterator, optional. Use when data is split to features and target. Should include only one column.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0:  Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False. False (default) - Input data might be updated as result of functions such as update_targets or update_features. True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.build_from_file","title":"build_from_file","text":"<pre><code>build_from_file(file_path, target_file_path=None, *, reader_f=pd.read_csv, reader_kwargs=None, reader_chunk_size_param_name=None, chunk_size=None, chunk_by=None)\n</code></pre> <p>Create a coreset tree based on data taken from local storage. build functions may be called only once. To add more data to the coreset tree use one of the partial_build functions. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories. Path(s) to the place where data is stored. Data includes features, may include targets and may include indices.</p> required <code>target_file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories, optional. Use when the dataset files are split to features and target. Each file should include only one column.</p> <code>None</code> <code>reader_f</code> <code>Callable</code> <p>pandas like read method, optional, default pandas read_csv. For example, to read excel files use pandas read_excel.</p> <code>pd.read_csv</code> <code>reader_kwargs</code> <code>dict</code> <p>dict, optional. Keyword arguments used when calling reader_f method.</p> <code>None</code> <code>reader_chunk_size_param_name</code> <code>str</code> <p>str, optional. reader_f input parameter name for reading file in chunks. When not provided we'll try to figure it out our self. Based on the data, we decide on the optimal chunk size to read and use this parameter as input when calling reader_f. Use \"ignore\" to skip the automatic chunk reading logic.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0:  Nodes are created based on input chunks. chunk_size=-1: Force the service to create a single coreset from the entire dataset (if it fits into memory).</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.filter_out_samples","title":"filter_out_samples","text":"<pre><code>filter_out_samples(filter_function, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Remove samples from the coreset tree, based on the provided filter function. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>filter_function</code> <code>Callable[[Iterable, Iterable, Union[Iterable, None], Union[Iterable, None]], Iterable[Any]]</code> <p>function, optional. A function that returns a list of indices to be removed from the tree. The function should accept 4 parameters as input: indices, X, y, props and return a list(iterator) of indices to be removed from the coreset tree. For example, in order to remove all instances with a target equal to 6, use the following function: filter_function = lambda indices, X, y, props : indices[y = 6].</p> required <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.fit","title":"fit","text":"<pre><code>fit(level=0, model=None, **model_params)\n</code></pre> <p>Fit a model on the coreset tree. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>Defines the depth level of the tree from which the coreset is extracted. Level 0 returns the coreset from the head of the tree with around coreset_size samples. Level 1 returns the coreset from the level below the head of the tree with around twice of the samples compared to level 0, etc. If the passed level is greater than the maximal level of the tree, the maximal available level is used.</p> <code>0</code> <code>model</code> <code>Any</code> <p>A Scikit-learn compatible model instance, optional. When provided, model_params are not relevant. Default: instantiate the service model class using input model_params.</p> <code>None</code> <code>model_params</code> <p>Model hyperparameters kwargs. Input when instantiating default model class.</p> <code>{}</code> <p>Returns:</p> Type Description <p>Fitted estimator.</p>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.get_cleaning_samples","title":"get_cleaning_samples","text":"<pre><code>get_cleaning_samples(size=None, ignore_indices=None, select_from_indices=None, select_from_function=None, ignore_seen_samples=True)\n</code></pre> <p>Returns indices of samples in descending order of importance. Useful for identifying mislabeled instances and other anomalies in the data. size must be provided. Function must be called after build. This function is only applicable in case the coreset tree was optimized_for 'cleaning'. This function is not for retrieving the coreset (use get_coreset in this case).</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>required, optional. Number of samples to return.</p> <code>None</code> <code>ignore_indices</code> <code>Iterable</code> <p>array-like, optional. An array of indices to ignore when selecting important samples.</p> <code>None</code> <code>select_from_indices</code> <code>Iterable</code> <p>array-like, optional.  An array of indices to consider when selecting important samples.</p> <code>None</code> <code>select_from_function</code> <code>Callable[[Iterable, Iterable, Union[Iterable, None], Union[Iterable, None]], Iterable[Any]]</code> <p>function, optional.  Pass a function in order to limit the selection of the important samples accordingly.  The function should accept 4 parameters as input: indices, X, y, props.  and return a list(iterator) of the desired indices.</p> <code>None</code> <code>ignore_seen_samples</code> <code>bool</code> <p>bool, optional, default True.  Exclude already seen samples and set the seen flag on any indices returned by the function.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Dict</code> <code>Union[ValueError, dict]</code> <p>indices: array-like[int].     Important samples indices. X: array-like[int].     X array. y: array-like[int].     y array. importance: array-like[float].     The importance property. Instances that receive a high Importance in the Coreset computation,     require attention as they usually indicate a labeling error,     anomaly, out-of-distribution problem or other data-related issue.</p>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.get_coreset","title":"get_coreset","text":"<pre><code>get_coreset(level=0, as_orig=False, with_index=False)\n</code></pre> <p>Get tree's coreset data either in a processed format or in the original format. Use the level parameter to control the level of the tree from which samples will be returned. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>int, optional, default 0. Defines the depth level of the tree from which the coreset is extracted. Level 0 returns the coreset from the head of the tree with around coreset_size samples. Level 1 returns the coreset from the level below the head of the tree with around twice of the samples compared to level 0, etc. If the passed level is greater than the maximal level of the tree, the maximal available level is used.</p> <code>0</code> <code>as_orig</code> <code>bool</code> <p>boolean, optional, default False. Should the data be returned in its original format or as a tuple of indices, X, and optionally y. True: data is returned as a pandas DataFrame. False: return a tuple of (indices, X, y) if target was used and (indices, X) when there is no target.</p> <code>False</code> <code>with_index</code> <code>bool</code> <p>boolean, optional, default False. Relevant only when as_orig=True. Should the returned data include the index column.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Dict</code> <code>dict</code> <p>data: numpy arrays tuple (indices, X, optional y) as_orig=False or as a pandas DataFrame when as_orig=True. w: A numpy array of sample weights. n_represents: number of instances represented by the coreset.</p>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.get_max_level","title":"get_max_level","text":"<pre><code>get_max_level()\n</code></pre> <p>Return the maximal level of the coreset tree. Level 0 is the head of the tree. Level 1 is the level below the head of the tree, etc.</p>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.holdout_validate","title":"holdout_validate","text":"<pre><code>holdout_validate(level=None, validation_size=0.2, model=None, scoring=None, return_model=False, verbose=0, **model_params)\n</code></pre> <p>Method for hold-out validation on the coreset tree. The test set is always the last part of the dataset.</p>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.holdout_validate--parameters","title":"Parameters","text":"int, optional. <p>The level of the tree on which the training and validation will be performed. If None, the best level will be selected. Default: None</p> float, optional. <p>The percentage of the dataset that will be used for testing the model. Default: 0.2</p> A Scikit-learn compatible model instance, optional. <p>When provided, model_params are not relevant. The model class needs to implement the usual scikit-learn interface. Default: instantiate the service model class using input model_params.</p> callable or string, optional. <p>If it is a callable object, it must return a scalar score. The signature of the call is (model, X, y), where model is the ML model to be evaluated, X is the data and y is the ground truth labeling. For example, it can be produced using sklearn.metrics.make_scorer (https://scikit-learn.org/stable/modules/generated/sklearn.metrics.make_scorer.html). If it is a string, it must be a valid name of a Scikit-learn scoring method (see https://scikit-learn.org/stable/modules/model_evaluation.html) If None, the default scorer of the current model is used. Default: None</p> bool, optional. <p>If True, the trained model is also returned. Default: False</p> int, optional. <p>Controls the verbosity: the higher, the more messages.     &gt;=1 : the training and validation time is displayed;     &gt;=2 : the validation score is also displayed;     &gt;=3 : starting time of the computation is also displayed. Default: 0</p> kwargs, optional. <p>The hyper-parameters of the model. If not provided, the default values are used.</p>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.holdout_validate--returns","title":"Returns","text":"<pre><code>The validation score.\nIf return_model=True, the trained model is also returned.\n</code></pre>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.is_dirty","title":"is_dirty","text":"<pre><code>is_dirty()\n</code></pre> <p>Returns:</p> Type Description <code>bool</code> <p>Indicates whether the coreset tree has nodes marked as dirty, meaning they were affected by any of the methods: remove_samples, update_targets, update_features or filter_out_samples, when they were called with force_do_nothing.</p>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.load","title":"load  <code>classmethod</code>","text":"<pre><code>load(dir_path, name=None, *, data_manager=None, load_buffer=True, working_directory=None)\n</code></pre> <p>Restore a service object from a local directory.</p> <p>Parameters:</p> Name Type Description Default <code>dir_path</code> <code>Union[str, os.PathLike]</code> <p>str, path. Local directory where service data is stored.</p> required <code>name</code> <code>str</code> <p>string, optional, default service class name (lower case). The name prefix of the subdirectory to load. When several subdirectories having the same name prefix are found, the last one, ordered by name, is selected. For example when saving with override=False, the chosen subdirectory is the last saved.</p> <code>None</code> <code>data_manager</code> <code>DataManagerT</code> <p>DataManagerBase subclass, optional. When specified, input data manger will be used instead of restoring it from the saved configuration.</p> <code>None</code> <code>load_buffer</code> <code>bool</code> <p>boolean, optional, default True. If set, load saved buffer (a partial node of the tree) from disk and add it to the tree.</p> <code>True</code> <code>working_directory</code> <code>Union[str, os.PathLike]</code> <p>str, path, optional, default use working_directory from saved configuration. Local directory where intermediate data is stored.</p> <code>None</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>CoresetTreeService object</p>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.partial_build","title":"partial_build","text":"<pre><code>partial_build(X, y=None, indices=None, props=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Add new samples to a coreset tree from parameters X, y, indices and props (properties). All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>array like or iterator of arrays like. An array or an iterator of features. All features must be numeric and there should be no missing values.</p> required <code>y</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator of targets. The target will be ignored when the Coreset is built.</p> <code>None</code> <code>indices</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator with indices of X.</p> <code>None</code> <code>props</code> <code>Union[Iterable[Any], Iterable[Iterable[Any]]]</code> <p>array like or iterator of arrays like, optional. An array or an iterator of properties. Properties, won\u2019t be used to compute the Coreset or train the model, but it is possible to filter_out_samples on them or to pass them in the select_from_function of get_cleaning_samples.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional. The number of instances used when creating a coreset node in the tree. chunk_size=0: Nodes are created based on input chunks.</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False False (default) - Input data might be updated as result of functions such as update_targets or update_features. True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.partial_build_from_df","title":"partial_build_from_df","text":"<pre><code>partial_build_from_df(datasets, target_datasets=None, *, chunk_size=None, chunk_by=None, copy=False)\n</code></pre> <p>Add new samples to a coreset tree based on the pandas DataFrame iterator. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>datasets</code> <code>Union[Iterator[pd.DataFrame], pd.DataFrame]</code> <p>pandas DataFrame or a DataFrame iterator. Data includes features, may include targets and may include indices.</p> required <code>target_datasets</code> <code>Union[Iterator[pd.DataFrame], pd.DataFrame]</code> <p>pandas DataFrame or a DataFrame iterator, optional. Use when data is split to features and target. Should include only one column.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional, default previous used chunk_size. The number of instances used when creating a coreset node in the tree. chunk_size=0: Nodes are created based on input chunks.</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <code>copy</code> <code>bool</code> <p>boolean, default False. False (default) - Input data might be updated as result of functions such as update_targets or update_features. True - Data is copied before processing (impacts memory).</p> <code>False</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.partial_build_from_file","title":"partial_build_from_file","text":"<pre><code>partial_build_from_file(file_path, target_file_path=None, *, reader_f=pd.read_csv, reader_kwargs=None, reader_chunk_size_param_name=None, chunk_size=None, chunk_by=None)\n</code></pre> <p>Add new samples to a coreset tree based on data taken from local storage. All features must be numeric and there should be no missing values. The target will be ignored when the Coreset is built.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories. Path(s) to the place where data is stored. Data includes features, may include targets and may include indices.</p> required <code>target_file_path</code> <code>Union[Union[str, os.PathLike], Iterable[Union[str, os.PathLike]]]</code> <p>file, list of files, directory, list of directories, optional. Use when files are split to features and target. Each file should include only one column.</p> <code>None</code> <code>reader_f</code> <code>Callable</code> <p>pandas like read method, optional, default pandas read_csv. For example, to read excel files use pandas read_excel.</p> <code>pd.read_csv</code> <code>reader_kwargs</code> <code>dict</code> <p>dict, optional. Keyword arguments used when calling reader_f method.</p> <code>None</code> <code>reader_chunk_size_param_name</code> <code>str</code> <p>str, optional. reader_f input parameter name for reading file in chunks. When not provided we'll try to figure it out our self. Based on the data, we decide on the optimal chunk size to read and use this parameter as input when calling reader_f. Use \"ignore\" to skip the automatic chunk reading logic.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>int, optional, default previous used chunk_size. The number of instances used when creating a coreset node in the tree. chunk_size=0: Nodes are created based on input chunks.</p> <code>None</code> <code>chunk_by</code> <code>Union[Callable, str, list]</code> <p>function, label, or list of labels, optional. Split the data according to the provided key. When provided, chunk_size input is ignored.</p> <code>None</code> <p>Returns:</p> Type Description <code>CoresetTreeService</code> <p>self</p>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.plot","title":"plot","text":"<pre><code>plot(dir_path=None, selected_trees=None)\n</code></pre> <p>Produce a tree graph plot and save figure as a local png file.</p> <p>Parameters:</p> Name Type Description Default <code>dir_path</code> <code>Union[str, os.PathLike]</code> <p>string or PathLike. Path to save the plot figure in; if not provided, or if isn't valid/doesn't exist, the figure will be saved in the current directory (from which this method is called).</p> <code>None</code> <code>selected_trees</code> <code>dict</code> <p>dict, optional. A dictionary containing the names of the image file(s) to be generated.</p> <code>None</code> <p>Returns:</p> Type Description <code>pathlib.Path</code> <p>Image file path</p>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.predict","title":"predict","text":"<pre><code>predict(X)\n</code></pre> <p>Run prediction on the trained model. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>An array of features.</p> required <p>Returns:</p> Type Description <p>Model prediction results.</p>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.predict_proba","title":"predict_proba","text":"<pre><code>predict_proba(X)\n</code></pre> <p>Run prediction on the trained model. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Union[Iterable, Iterable[Iterable]]</code> <p>An array of features.</p> required <p>Returns:</p> Type Description <p>Returns the probability of the sample for each class in the model.</p>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.print","title":"print","text":"<pre><code>print(selected_tree=None)\n</code></pre> <p>Print the tree's string representation.</p> <p>Parameters:</p> Name Type Description Default <code>selected_trees</code> <p>string or list. Which tree(s) to print. Defaults to printing all.</p> required"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.remove_samples","title":"remove_samples","text":"<pre><code>remove_samples(indices, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Remove samples from the coreset tree. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>indices</code> <code>Iterable</code> <p>array-like. An array of indices to be removed from the coreset tree.</p> required <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.save","title":"save","text":"<pre><code>save(dir_path=None, name=None, save_buffer=True, override=False, allow_pickle=True)\n</code></pre> <p>Save service configuration and relevant data to a local directory. Use this method when the service needs to be restored.</p> <p>Parameters:</p> Name Type Description Default <code>dir_path</code> <code>Union[str, os.PathLike]</code> <p>string or PathLike, optional, default self.working_directory. A local directory for saving service's files.</p> <code>None</code> <code>name</code> <code>str</code> <p>string, optional, default service class name (lower case). Name of the subdirectory where the data will be stored.</p> <code>None</code> <code>save_buffer</code> <code>bool</code> <p>boolean, default True. Save also the data in the buffer (a partial node of the tree) along with the rest of the saved data.</p> <code>True</code> <code>override</code> <code>bool</code> <p>bool, optional, default False. False: add a timestamp suffix so each save won\u2019t override the previous ones. True: The existing subdirectory with the provided name is overridden.</p> <code>False</code> <code>allow_pickle</code> <code>bool</code> <p>bool, optional, default True. True: Saves the Coreset tree in pickle format (much faster). False: Saves the Coreset tree in JSON format.</p> <code>True</code> <p>Returns:</p> Type Description <code>pathlib.Path</code> <p>Save directory path.</p>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.save_coreset","title":"save_coreset","text":"<pre><code>save_coreset(file_path, level=0, as_orig=False, with_index=False)\n</code></pre> <p>Get coreset from the tree and save to a file along with coreset weights. Use the level parameter to control the level of the tree from which samples will be returned. This function is only applicable in case the coreset tree was optimized_for 'training'.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[str, os.PathLike]</code> <p>string or PathLike. Local file path to store the coreset.</p> required <code>level</code> <code>int</code> <p>int, optional, default 0. Defines the depth level of the tree from which the coreset is extracted. Level 0 returns the coreset from the head of the tree with around coreset_size samples. Level 1 returns the coreset from the level below the head of the tree with around twice of the samples compared to level 0, etc. If the passed level is greater than the maximal level of the tree, the maximal available level is used.</p> <code>0</code> <code>as_orig</code> <code>bool</code> <p>boolean, optional, default False. True: save in the original format. False: save in a processed format (indices, X, y, weight).</p> <code>False</code> <code>with_index</code> <code>bool</code> <p>boolean, optional, default False. Relevant only when as_orig=True. Save also index column.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.set_seen_indication","title":"set_seen_indication","text":"<pre><code>set_seen_indication(seen_flag=True, indices=None)\n</code></pre> <p>Set samples as 'seen' or 'unseen'. Not providing an indices list defaults to setting the flag on all samples. This function is only applicable in case the coreset tree was optimized_for 'cleaning'.</p> <p>Parameters:</p> Name Type Description Default <code>seen_flag</code> <code>bool</code> <p>bool, optional, default True. Set 'seen' or 'unseen' flag</p> <code>True</code> <code>indices</code> <code>Iterable</code> <p>array like, optional. Set flag only for the provided list of indices. Defaults to all indices.</p> <code>None</code>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.update_dirty","title":"update_dirty","text":"<pre><code>update_dirty(force_resample_all=None, force_sensitivity_recalc=None)\n</code></pre> <p>Calculate the sensitivity and resample the nodes that were marked as dirty, meaning they were affected by any of the methods: remove_samples, update_targets, update_features or filter_out_samples, when they were called with force_do_nothing.</p> <p>Parameters:</p> Name Type Description Default <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.update_features","title":"update_features","text":"<pre><code>update_features(indices, X, feature_names=None, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Update the features for selected samples on the coreset tree. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>indices</code> <code>Iterable</code> <p>array-like. An array of indices to be updated.</p> required <code>X</code> <code>Iterable</code> <p>array-like. An array of features. Should have the same length as indices.</p> required <code>feature_names</code> <code>Iterable[str]</code> <p>If the quantity of features in X is not equal to the quantity of features in the original coreset, this param should contain list of names of passed features.</p> <code>None</code> <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"reference/services/coreset_tree/svd/#services.coreset_tree.svd.CoresetTreeServiceSVD.update_targets","title":"update_targets","text":"<pre><code>update_targets(indices, y, force_resample_all=None, force_sensitivity_recalc=None, force_do_nothing=False)\n</code></pre> <p>Update the targets for selected samples on the coreset tree. The coreset tree is automatically updated to accommodate to the changes.</p> <p>Parameters:</p> Name Type Description Default <code>indices</code> <code>Iterable</code> <p>array-like. An array of indices to be updated.</p> required <code>y</code> <code>Iterable</code> <p>array-like. An array of classes/labels. Should have the same length as indices.</p> required <code>force_resample_all</code> <code>Optional[int]</code> <p>int, optional. Force full resampling of the affected nodes in the coreset tree, starting from level=force_resample_all. None - Do not force_resample_all (default), 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_sensitivity_recalc</code> <code>Optional[int]</code> <p>int, optional. Force the recalculation of the sensitivity and partial resampling of the affected nodes, based on the coreset's quality, starting from level=force_sensitivity_recalc. None - If self.save_all=False - one level above leaf node level. If self.save_all=True - leaf level 0 - The head of the tree, 1 - The level below the head of the tree, len(tree)-1 = leaf level, -1 - same as leaf level.</p> <code>None</code> <code>force_do_nothing</code> <code>Optional[bool]</code> <p>bool, optional, default False. When set to True, suppresses any update to the coreset tree until update_dirty is called.</p> <code>False</code>"},{"location":"coverage/","title":"Coverage","text":""}]}